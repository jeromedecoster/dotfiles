#!bash
# disable error sound
# example: when the caret is at the beginning of the line,
# press <left-arrow> key does an annoying sound
set bell-style none

# <tab> completion makes more propositions
# example: in the ~ folder, 'cd d<tab>' will also list the
# files that begin with an uppercase d, like Desktop
set completion-ignore-case on

# <tab> completion shows directly all propositions
# example: in the ~ folder, 'cd do<tab>' will directly list
# the files 'Documents' and 'Downloads'. With the default
# behavior, you need to press <tab> two times
set show-all-if-ambiguous on

# <tab> completion will ignore hidden files (files whose
# name starts with a dot)
# example: in the ~ folder, the default behavior when 'cd <tab>'
# will list all files (hidden files like '.inputrc' and visible
# files like 'Desktop'). Setting off will only list visible files
set match-hidden-files off

# <tab> completion will add a trailing slash to the directories
# example: in the ~ folder, 'cd <tab>' will show 'Desktop/'
# instead of 'Desktop'
set mark-directories on

# repeatedly press <tab or shift-tab> will cycle in the prosositions
# and will directly write it on the command line
# example: in the ~ folder, 'cd D<tab or shift-tab>' will change the command
# to 'cd Desktop/'. Press <tab or shift-tab> again will change the line
# to 'cd Documents/'
# NOTE: msysGit bash is different than OSX Terminal.
# The shortcut "\e[Z" doesn't exist and it's replaced by "TAB".
# There is also no difference between <tab> and <shift+tab> on msysGit
TAB: menu-complete

# <alt-up-arrow> will delete the current or previous word
# from current position of caret. The default behavior write an
# annoying '[A'
# NOTE: msysGit bash is different than OSX Terminal.
# It's not possible to create a <ctrl-left-arrow> shorcut.
# So the behavior is replaced here with <alt-up-arrow>
"\e\e[A": backward-kill-word

# <alt-down-arrow> will delete the current or next word
# from current position of caret. The default behavior write an
# annoying '[B'
# NOTE: msysGit bash is different than OSX Terminal.
# It's not possible to create a <ctrl-right-arrow> shorcut.
# So the behavior is replaced here with <alt-down-arrow>
"\e\e[B": kill-word

# <alt-left-arrow> will move the caret position to the beginning
# of the current or previous word. The default behavior write
# an annoying '[D'
"\e\e[D": backward-word

# <alt-right-arrow> will move the caret position to the end
# of the current or next word. The default behavior write
# an annoying '[C'
"\e\e[C": forward-word

# <alt-N> and <ctrl-N> will write the '~' tilde char.
# The default behavior of <alt-N> delete the current line and write
# an annoying ':'
# <altgr-N> also write '~' but you need to press it twice
"\en": "~"
"\C-n": "~"

# NOTE: some shortcut tested/working on msysGit bash
# "\C-b": "<ctrl-b>"
# "\eb": "<alt-b>"
# "\e\e[2~": "<alt-inser>"
# "\e[1~": "<home>"
# "\e[2~": "<inser>"
# "\e[3~": "<suppr>"
# "\e[4~": "<end>"
# "\e[5~": "<page-up>"
# "\e[6~": "<page-down>"
# "\e\e[1~": "<alt-home>"
# "\e\e[2~": "<alt-inser>"
# "\e\e[3~": "<alt-suppr>"
# "\e\e[4~": "<alt-end>"
# "\e\e[5~": "<alt-page-up>"
# "\e\e[6~": "<alt-page-down>"
# "\C-x\C-r": "<ctrl-x then ctrl-r>"
# "\e\e[A": "<alt-up-arrow>"
# "\e\e[B": "<alt-down-arrow>"
# "\e\e[D": "<alt-left-arrow>"
# "\e\e[C": "<alt-right-arrow>"
# "\C-[[A": "<up-arrow with or without ctrl-altgr-shift>"
# "\C-[[B": "<down-arrow with or without ctrl-altgr-shift>"
# "\C-[[D": "<left-arrow with or without ctrl-altgr-shift>"
# "\C-[[C": "<right-arrow with or without ctrl-altgr-shift>"
# TAB: "<tab or shift-tab>"
# "\M-y": "<alt-y>"
# "\C-x!": "<ctrl-x then !>"
# "\M-=": "<alt-=>"
# "\M-?": "<alt-? with shift>"
# "\C-x/": "<ctrl-x then / with shift>"
# "\C-x@": "<ctrl-x then @ with altgr>"
# "\C-x$": "<ctrl-x then $>"
# "\C-p": "<ctrl-p>"
# "\M-[A": "<up-arrow with or without ctrl-altgr-shift>"
# "\C-x\C-r": "<ctrl-x then ctrl-r>"