#!/usr/bin/env ruby
require 'pathname'
require 'fileutils'
require 'open3'

# puts RUBY_PLATFORM
# x86_64-darwin10.8.0
# i386-mingw32

# ENV.each_pair{ |k,v| puts k+'='+v}
# ENV['PATH'].split(';').each{ |k| puts k}
# __END__

# system('powershell -Command Write-Host "Funky " -f Magenta -nonewline; Write-Host "." -nonewline; Write-Host "Boogie" -f green')

# [Environment]::SetEnvironmentVariable( "INCLUDE", $env:INCLUDE, [System.EnvironmentVariableTarget]::User )
# [System.Environment]::SetEnvironmentVariable("PATH", $Env:Path + ";C:\Users\JER\bin", [System.EnvironmentVariableTarget]::Machine)

# %SystemRoot%\system32\WindowsPowerShell\v1.0\;C:\Program Files\Common Files\Microsoft Shared\Windows Live;C:\Program Files (x86)\Common Files\Microsoft Shared\Windows Live;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\ATI Technologies\ATI.ACE\Core-Static;C:\Program Files (x86)\Windows Live\Shared;C:\Program Files (x86)\Common Files\Roxio Shared\OEM\DLLShared\;C:\Program Files (x86)\Common Files\Roxio Shared\OEM\DLLShared\;C:\Program Files (x86)\Common Files\Roxio Shared\OEM\12.0\DLLShared\;C:\Program Files (x86)\Roxio\OEM\AudioCore\;C:\Program Files (x86)\Common Files\Acronis\SnapAPI\;C:\Program Files (x86)\QuickTime\QTSystem\;C:\Jer\bin;C:\Python27;C:\Program Files (x86)\MKVToolNix;C:\Program Files\nodejs\;C:\Program Files (x86)\Git\cmd;C:\Ruby193\bin;C:\Program Files (x86)\Sikuli X\libs;C:\Program Files (x86)\Java\jre6\\bin;C:\Users\JE
# C:\Windows\system32\WindowsPowerShell\v1.0\;C:\Program Files\Common Files\Microsoft Shared\Windows Live;C:\Program Files (x86)\Common Files\Microsoft Shared\Windows Live;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\ATI Technologies\ATI.ACE\Core-Static;C:\Program Files (x86)\Windows Live\Shared;C:\Program Files (x86)\Common Files\Roxio Shared\OEM\DLLShared\;C:\Program Files (x86)\Common Files\Roxio Shared\OEM\DLLShared\;C:\Program Files (x86)\Common Files\Roxio Shared\OEM\12.0\DLLShared\;C:\Program Files (x86)\Roxio\OEM\AudioCore\;C:\Program Files (x86)\Common Files\Acronis\SnapAPI\;C:\Program Files (x86)\QuickTime\QTSystem\;C:\Jer\bin;C:\Python27;C:\Program Files (x86)\MKVToolNix;C:\Program Files\nodejs\;C:\Program Files (x86)\Git\cmd;
# __END__


# OSX:
# TERM_PROGRAM=Apple_Terminal
# SHELL=/bin/bash
# HOME=/Users/jerome.decoster
# puts ENV.keys.include? 'HOME'
# puts ENV['HOME'].index('/Users/') == 0
# ruby -e "require 'open-uri'; require 'openssl'; OpenSSL::SSL::VERIFY_PEER = OpenSSL::SSL::VERIFY_NONE; eval open('https://raw.github.com/jeromedecoster/dotfiles/master/bin/install').read"
# (New-Object System.Net.WebClient).DownloadFile("https://raw.github.com/jeromedecoster/dotfiles/master/bin/install","f:\\install")
# (New-Object System.Net.WebClient).DownloadFile("https://raw.github.com/jeromedecoster/dotfiles/master/bin/install","$pwd\install"); Start-Process "ruby" "$pwd\install"
# $f="$env:temp\install";(New-Object System.Net.WebClient).DownloadFile("https://raw.github.com/jeromedecoster/dotfiles/master/bin/install",$f);Start-Process "ruby" "$f"
# Start-Process "ruby" "G:\TMP\install.rb"
# $f="$env:temp\install";(New-Object System.Net.WebClient).DownloadFile("https://raw.github.com/jeromedecoster/dotfiles/master/bin/install",$f);Start-Process "ruby" "$f"
# ls env:
# USERPROFILE
# [System.Environment]::SetEnvironmentVariable("PATH",$env:path+";"+$env:userprofile+"\bin", "Machine")
# [System.Environment]::SetEnvironmentVariable("PATH",$env:path+";"+$env:userprofile+"\bin", "User")


# WIN:
# HOME=C:/Users/JER
# OS=Windows_NT

def exit_msg msg
    STDERR.puts msg
    exit 1
end

OS = if ENV.keys.include?('HOME') and ENV['HOME'].index('/Users/') == 0
        'osx'
    elsif ENV.keys.include?('OS') and ENV['OS'].index('Windows') == 0
        'win'
    else
        exit_msg 'Aborted: Unsupported operating system'
    end

def done ok=true
    msg = ok ? 'OK' : 'KO'
    if OS == 'win'
        # PowerShell only supports the 16 basic ConsoleColor enumeration values.
        # Black DarkBlue DarkGreen DarkCyan DarkRed DarkMagenta DarkYellow
        # Gray DarkGray Blue Green Cyan Red Magenta Yellow White
        col = ok ? 'green' : 'red'
        system "powershell -Command Write-Host '#{msg}' -f #{col}"
    else
        col = ok ? "\033[0;32m" : "\033[0;31m"
        puts "#{col}#{msg}\033[0m"
    end
end

def path uri
    Pathname.new(uri).expand_path
end

def copy from, to
    from_path = path from
    to_path = path to
    exclude = %w{. .. .DS_Store}
    files = Dir.entries(from_path).delete_if{ |e| exclude.include? e }
    files.each do |e|
        a = "#{from_path}/#{e}"
        b = "#{to_path}/#{e}"
        FileUtils.mv b, BACKUP if File.exist? b
        FileUtils.cp_r a, b
    end
end

# $ws = New-Object -ComObject WScript.Shell
# $Shortcut = $ws.CreateShortcut("$Home\bin\subl.lnk")
# $Shortcut.TargetPath = "C:\Program Files\Sublime Text 2\sublime_text.exe"
# $Shortcut.Save()

# Set-ShortCut "$Home\bin\subl.lnk" "C:\Program Files\Sublime Text 2\sublime_text.exe"
# subl = path 'C:\Program Files\Sublime Text 2\sublime_text.exe'
# link = path '~/bin/subl'
# FileUtils.ln_s subl, link

# print "Check browsers..."
# done
# print "Check truc..."
# done false
# __END__




if OS == 'win'
    PROG = ENV['ProgramFiles(x86)']
    def browser url=nil
        chrome = path '~/AppData/Local/Google/Chrome/Application/chrome.exe'
        firefox = path "#{PROG}/Mozilla Firefox/firefox.exe"
        return (chrome.exist? or firefox.exist?) if url.nil?
        if chrome.exist?
            `#{chrome} --incognito #{url}`
        elsif firefox.exist?
            `start "#{firefox}" #{url}`
        end
    end

    # Check Chrome and/or Firefox
    print "Check browsers..."
    unless browser
        done false
        exit_msg 'Aborted: Chrome or Firefox must be installed'
    end
    done

    # Check msysGit
    print "Check msysGit..."
    msysgit = path "#{PROG}/Git/bin/git.exe"
    unless msysgit.exist?
        done false
        sleep 1
        browser 'http://code.google.com/p/msysgit/downloads/list'
        exit_msg 'Aborted: msysGit must be installed'
    end
    done

    # Check Git
    print "Check git..."
    git = begin
            `git`
            true
        rescue Errno::ENOENT
            false
        end
    unless git
        cmd = path("#{PROG}/Git/cmd").to_s.gsub('/', '\\')
        done false
        if ENV['PATH'].split(';').index{ |e| e == cmd }.nil?
            exit_msg "Aborted: \"#{cmd}\" must be added to the system PATH"
        else
            sleep 1
            browser 'http://code.google.com/p/msysgit/downloads/list'
            exit_msg "Aborted: msysGit installed but git not available as CLI"
        end
    end
    done

# OS == 'OSX'
else 
    def browser url=nil
        chrome  = path '/Applications/Google Chrome.app'
        firefox = path '/Applications/Firefox.app'
        return (chrome.exist? or firefox.exist?) if url.nil?
        url = "http://#{url}" unless url.index('http') == 0
        if chrome.exist?
            `arch -i386 osascript <<-EOF
                set launched to true
                if application "Google Chrome" is not running then
                    set launched to false
                    tell application "Google Chrome" to activate
                    delay 0.5
                end if
                tell application "Google Chrome"
                    if launched is false then
                        set URL of active tab of window 1 to "#{url}"
                    else
                        tell window 1 to make new tab with properties {URL:"#{url}"}
                    end if
                end tell
            EOF`
        elsif firefox.exist?
            `open -a Firefox.app #{url}`
        end
    end

    # Check Chrome and/or Firefox
    print "Check browsers..."
    unless browser
        done false
        exit_msg 'Aborted: Chrome or Firefox must be installed'
    end
    done

    # Check Git
    print "Check git..."
    git = `git 2>/dev/null`.strip.size > 0
    unless git
        done false
        sleep 1
        browser 'http://git-scm.com/download/mac'
        exit_msg 'Aborted: Git must be installed'
    end
    done
end


dotfiles = path '~/.dotfiles'

if dotfiles.exist? and dotfiles.directory?
    # update or uninstall
    # exit_msg 'Aborted: Already installed'
    print "Update repository..."
    pwd = Dir.pwd
    Dir.chdir dotfiles
    o, e, s = Open3.capture3 "git pull"
    Dir.chdir pwd
else
    # read-only
    print "Clone repository..."
    # o, e, s = Open3.capture3 "git clone --quiet https://github.com/jeromedecoster/dotfiles.git #{dotfiles.to_s}"
    # o, e, s = Open3.capture3 "git clone --quiet git://github.com/jeromedecoster/dotfiles.git #{dotfiles.to_s}"
    o, e, s = Open3.capture3 "git clone --quiet git@github.com:jeromedecoster/dotfiles.git #{dotfiles.to_s}"
    # puts "o:#{o}"
    # puts "e:#{e}"
    # puts "s:#{s.success?}"
end
unless s.success?
    done false
    exit_msg e
end
done

#
date = Time.now.strftime '%Y-%m-%d--%H-%M-%S'
BACKUP = FileUtils.mkdir_p(path("~/.dotfiles-backup/#{date}")).first
# puts BACKUP

copy "~/.dotfiles/#{OS}/user", '~'

# Create symbolic link of Sublime Text
subl = path '/Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl'
if subl.exist?
    link = path '/usr/local/bin/subl'
    FileUtils.rm_f link if link.exist?
    FileUtils.ln_s subl, link
end