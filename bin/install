#!/usr/bin/env ruby
require 'pathname'
require 'fileutils'
require 'open3'

# puts RUBY_PLATFORM
# x86_64-darwin10.8.0
# i386-mingw32


# def ko
#     system('powershell -Command Write-Host "OK" -f red')
# end
# print "Check browsers..."
# done
# print "Check lorem ipsum..."
# done false


# __END__
# ENV.each_pair{ |k,v| puts k+'='+v}
# chrome = Pathname.new('/Applications/Google Chrome.app')
# puts chrome
# puts chrome.exist?

# require 'colorize'
# puts "This is blue".colorize( :blue )

# system('powershell -Command Write-Host "Funky" -foreground "red"')
# PowerShell only supports the 16 basic ConsoleColor enumeration values.
# Black DarkBlue DarkGreen DarkCyan DarkRed DarkMagenta DarkYellow Gray DarkGray Blue Green Cyan Red Magenta Yellow White
# system('powershell -Command Write-Host "Funky " -f Magenta -nonewline; Write-Host "." -nonewline; Write-Host "Boogie" -f green')

# __END__

# url = 'http://google.com'
# `arch -i386 osascript <<-EOF
# set launched to true
# if application "Google Chrome" is not running then
#     set launched to false
#     tell application "Google Chrome" to activate
#     delay 0.5
# end if
# tell application "Google Chrome"
#     if launched is false then
#         set URL of active tab of window 1 to "#{url}"
#     else
#         tell window 1 to make new tab with properties {URL:"#{url}"}
#     end if
# end tell
# EOF`

# OSX:
# TERM_PROGRAM=Apple_Terminal
# SHELL=/bin/bash
# HOME=/Users/jerome.decoster
# puts ENV.keys.include? 'HOME'
# puts ENV['HOME'].index('/Users/') == 0
 # ruby -e "require 'open-uri'; require 'openssl'; OpenSSL::SSL::VERIFY_PEER = OpenSSL::SSL::VERIFY_NONE; eval open('https://raw.github.com/jeromedecoster/dotfiles/master/bin/install').read"
# (New-Object System.Net.WebClient).DownloadFile("https://raw.github.com/jeromedecoster/dotfiles/master/bin/install","f:\\install")
# (New-Object System.Net.WebClient).DownloadFile("https://raw.github.com/jeromedecoster/dotfiles/master/bin/install","$pwd\install"); Start-Process "ruby" "$pwd\install"
# $f="$env:temp\install";(New-Object System.Net.WebClient).DownloadFile("https://raw.github.com/jeromedecoster/dotfiles/master/bin/install",$f);Start-Process "ruby" "$f"
# Start-Process "ruby" "G:\TMP\install.rb"
# $f="$env:temp\install";(New-Object System.Net.WebClient).DownloadFile("https://raw.github.com/jeromedecoster/dotfiles/master/bin/install",$f);Start-Process "ruby" "$f"


# WIN:
# HOME=C:/Users/JER
# OS=Windows_NT

def exit_msg msg
    STDERR.puts msg
    exit 1
end

OS = if ENV.keys.include?('HOME') and ENV['HOME'].index('/Users/') == 0
        'OSX'
    elsif ENV.keys.include?('OS') and ENV['OS'].index('Windows') == 0
        'WIN'
    else
        exit_msg 'Aborted: Unsupported operating system'
    end

def done ok=true
    msg = ok ? 'OK' : 'KO'
    if OS == 'WIN'
        col = ok ? 'green' : 'red'
        system "powershell -Command Write-Host '#{msg}' -f #{col}"
    else
        puts ''
    end
end

def path uri
    Pathname.new(uri).expand_path
end

# print "Check browsers..."
# done
# print "Check lorem ipsum..."
# done false
# __END__
def copy from, to
    from_path = path from
    to_path = path to
    exclude = %w{. .. .DS_Store}
    files = Dir.entries(from_path).delete_if{ |e| exclude.include? e }
    files.each do |e|
        a = "#{from_path}/#{e}"
        b = "#{to_path}/#{e}"
        FileUtils.mv b, BACKUP if File.exist? b
        FileUtils.cp_r a, b
    end
end




if OS == 'WIN'
    PROG = ENV['ProgramFiles(x86)']
    def browser url=nil
        chrome = path '~/AppData/Local/Google/Chrome/Application/chrome.exe'
        firefox = path "#{PROG}/Mozilla Firefox/firefox.exe"
        return (chrome.exist? or firefox.exist?) if url.nil?
        if chrome.exist?
            `#{chrome} --incognito #{url}`
        elsif firefox.exist?
            `start "#{firefox}" #{url}`
        end
    end

    # Check Chrome and/or Firefox
    print "Check browsers..."
    unless browser
        done false
        exit_msg 'Aborted: Chrome or Firefox must be installed'
    end
    done

    # Check msysGit
    print "Check msysGit..."
    msysgit = path "#{PROG}/Git/bin/git.exe"
    unless msysgit.exist?
        done false
        sleep 1
        browser 'http://code.google.com/p/msysgit/downloads/list'
        exit_msg 'Aborted: msysGit must be installed'
    end
    done

    # Check Git
    print "Check git..."
    git = begin
            `git`
            true
        rescue Errno::ENOENT
            false
        end
    unless git
        cmd = path("#{PROG}/Git/cmd").to_s.gsub('/', '\\')
        done false
        if ENV['PATH'].split(';').index{ |e| e == cmd }.nil?
            exit_msg "Aborted: \"#{cmd}\" must be added to the system PATH"
        else
            sleep 1
            browser 'http://code.google.com/p/msysgit/downloads/list'
            exit_msg "Aborted: msysGit installed but git not available as CLI"
        end
    end
    done

    dotfiles  = path '~/.dotfiles'
    # puts dotfiles.class

    if dotfiles.exist? and dotfiles.directory?
        # update or uninstall
        # exit_msg 'Aborted: Already installed'
    else
        # read-only
        print "Clone repository..."
        o, e, s = Open3.capture3 "git clone --quiet git://github.com/jeromedecoster/dotfiles.git0 #{dotfiles.to_s}"
        # puts "o:#{o}"
        # puts "e:#{e}"
        # puts "s:#{s.success?}"
        unless s.success?
            done false
            exit_msg e
        end
        done
        # puts "res:#{res}"
        # ssh
        # `git clone git@github.com:jeromedecoster/dotfiles.git ~/.dotfiles`

        
    end

    # exit
    # date = Time.now.strftime '%Y-%m-%d--%H-%M-%S'
    # BACKUP = FileUtils.mkdir_p(path("~/.dotfiles-backup/#{date}")).first
    # # puts BACKUP

    # copy '~/.dotfiles/osx/user', '~'
    
else # osx
    def browser url=nil
        chrome  = path '/Applications/Google Chrome.app'
        firefox = path '/Applications/Firefox.app'
        return (chrome.exist? or firefox.exist?) if url.nil?
        url = "http://#{url}" unless url.index('http') == 0
        if chrome.exist?
            `arch -i386 osascript <<-EOF
                set launched to true
                if application "Google Chrome" is not running then
                    set launched to false
                    tell application "Google Chrome" to activate
                    delay 0.5
                end if
                tell application "Google Chrome"
                    if launched is false then
                        set URL of active tab of window 1 to "#{url}"
                    else
                        tell window 1 to make new tab with properties {URL:"#{url}"}
                    end if
                end tell
            EOF`
        elsif firefox.exist?
            `open -a Firefox.app #{url}`
        end
    end

    # Check Chrome and/or Firefox
    exit_msg 'Aborted: Chrome or Firefox must be installed' unless browser

    # Check Git
    git = `git 2>/dev/null`.strip.size > 0
    unless git
        browser 'http://git-scm.com/download/mac'
        exit_msg 'Aborted: Git must be installed'
    end

    dotfiles  = path '~/.dotfiles'
    # puts dotfiles.class

    if dotfiles.exist? and dotfiles.directory?
        # update or uninstall
        # exit_msg 'Aborted: Already installed'
    else
        `git clone git@github.com:jeromedecoster/dotfiles.git ~/.dotfiles`

        
    end

    date = Time.now.strftime '%Y-%m-%d--%H-%M-%S'
    BACKUP = FileUtils.mkdir_p(path("~/.dotfiles-backup/#{date}")).first
    # puts BACKUP

    copy '~/.dotfiles/osx/user', '~'
    # exit
    # src = path '~/.dotfiles/osx/user'
    # exclude = %w{. .. .DS_Store}
    # files = Dir.entries(src).delete_if{ |e| exclude.include? e }
    # # .map{ |e| "#{user}/#{e}" }
    # dest = path '~'
    # files.each do |e|
    #     if File.exist? "#{dest}/#{e}"
    #         FileUtils.mv "#{dest}/#{e}", BACKUP
    #     end
    #     FileUtils.cp_r "#{src}/#{e}", "#{dest}/#{e}"
    # end
    # files.each{ |e| FileUtils.cp_r "#{source}/#{e}", "#{dest}/#{e}" }
    # puts dotfiles
    # puts dotfiles.exist?
    # puts dotfiles.directory?


    # Create symbolic link of Sublime Text
    subl = path '/Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl'
    if subl.exist?
        link = path '/usr/local/bin/subl'
        FileUtils.rm_f link if link.exist?
        FileUtils.ln_s subl, link
    end
end

#
date = Time.now.strftime '%Y-%m-%d--%H-%M-%S'
BACKUP = FileUtils.mkdir_p(path("~/.dotfiles-backup/#{date}")).first
# puts BACKUP

copy '~/.dotfiles/osx/user', '~'