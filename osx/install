#!/bin/bash
[[ ! "$OSTYPE" =~ ^darwin ]] && echo "Aborted: this install script is only for OS X" && exit 1

#
# Write colored output
#
green() {
  printf "\033[0;32m%s\033[0m" $1
}
red() {
  printf "\033[0;31m%s\033[0m" $1
}
blue() {
  printf "\033[0;34m$1\033[0m" $1
}
ok() {
  printf "%s" `green OK`
}
notok() {
  printf "%s" `red KO`
}

# write in blue has a special behavior, will try to reduce path
# from /Users/username/.dotfiles to ~/.dotfiles
# function blue()  {
#     if [[ $# -eq 1 ]]; then
#         if [[ ! -e "$1" ]]; then
#             echo -e "\033[0;34m$1\033[0m"
#         else
#             # if the path is in the user folder ($HOME), reduce the output
#             # message using the shortcut '~'
#             # from /Users/username/.dotfiles to ~/.dotfiles
#             if [[ $HOME == ${1:0:${#HOME}} ]]; then
#                 echo -e "\033[0;34m~${1:${#HOME}}\033[0m"
#             # otherwise, simple output
#             else
#                 echo -e "\033[0;34m$1\033[0m"
#             fi
#         fi
#     fi
# }

# check if a folder is empty
# if yes, return 1, otherwise return 0
function empty() {
    [[ $# -ne 1 ]] && echo "Runtime error: empty require 1 argument" && exit 1
    [[ ! -d $1 ]]  && echo "Runtime error: empty require a folder path" && exit 1
    [[ $(find $1 -depth 1 2>/dev/null | grep . -c) -eq 0 ]] && echo 1 || echo 0
}

# open an url with chrome if installed, otherwise with firefox, otherwise with safari
function browser() {
    local url=$1
    [[ ${url:0:4} != 'http' ]] && url="http://$url"

    # if Chrome, browse with it
    if [[ -d '/Applications/Google Chrome.app' ]]; then
        arch -i386 osascript <<EOF
            set launched to true
            if application "Google Chrome" is not running then
                set launched to false
                tell application "Google Chrome" to activate
                delay 0.5
            end if
            on curtab(pUrl)
                tell application "Google Chrome" to set URL of active tab of front window to pUrl
            end curtab
            tell application "Google Chrome"
                if launched is false then
                    curtab("$url") of me
                else
                    if (count of properties of windows) is 0 then
                        make new window
                        curtab("$url") of me
                    else
                        if URL of active tab of front window is "chrome://newtab/" then
                            curtab("$url") of me
                        else
                            tell front window to make new tab
                            curtab("$url") of me
                        end if
                    end if
                end if
            end tell
EOF
    # if Firefox, browse with it
    elif [[ -d '/Applications/Firefox.app' ]]; then
        open -a Firefox.app $url
    # otherwise fallback to Safari
    elif [[ -d '/Applications/Safari.app' ]]; then
        open -a Safari.app $url
    fi
}


# copy files from a folder to a folder and backup all already existing files
# to another folder
function copy_files() {
    [[ $# -ne 3 ]] && echo "Runtime error: copy require 3 arguments" && exit 1
    if [[ ! -d "$3" || ! -d "$3" || ! -d "$3" ]]; then
        echo "Runtime error: copy require 3 valid paths" && exit 1
    fi
    local name
    for f in $1/{.*,*}; do
        name=$(basename "$f")
        # not readable, skip
        [[ ! -r "$f" ]] && continue
        # special files, skip
        [[ "$name" == '.' || "$name" == '..' || "$name" == '.DS_Store' ]] && continue
        if [[ -e $2/$name ]]; then
            mv "$2/$name" "$backup"
            cp -rp "$f" "$2"
            echo -e "Backup then overwrite $(blue $2/$name)"
        else
            cp -rp "$f" "$2"
            echo -e "Add $(blue $2/$name)"
        fi
    done
}

# sets the frontmost opened terminal window as the foreground window on screen
# and sets the other terminal windows to the background. It's a dirty hack because
# activate set all the windows of an application to the foreground
function terminal_frontmost() {
    arch -i386 osascript <<EOF
    tell application "Terminal"
        activate
        set skip to true
        repeat with e in windows
            try
                if not skip then
                    set frontmost of e to false
                end if
                set skip to false
            end try
        end repeat
    end tell
EOF
}

# install a chrome extension. The installation process is manual (open the extension page on the chrome web store)
# even if an automatic/silent process is possible and successfully tested. Why? Because:
# - a locally installed crx will not benefit easily/automatically of the future updates
# - if you manually uninstall an extension that had been installed silently, this extension is definitly blacklisted
# http://developer.chrome.com/extensions/external_extensions.html#faq
function chrome_extension() {
    # abort function if chrome is not installed
    [[ ! -d '/Applications/Google Chrome.app' ]] && return
    [[ $# -ne 3 ]] && echo "Runtime error: chrome_extension require 3 arguments" && exit 1
    # argument 1, the name to be displayed
    # argument 2, the id of the extension, it also the directory name to check (if directory, it's installed)
    # argument 3, the URL to open with chrome for launch manual installation
    local name=$(blue "$1")
    echo -n -e "Check $name chrome extension..."
    if [[ ! -d ~/Library/Application\ Support/Google/Chrome/Default/Extensions/$2 ]]; then
        notok
        while true; do
            echo -e -n "Install $name? [Yn]: "
            read r
            r=$(echo "$r" | tr '[A-Z]' '[a-z]')
            case "$r" in
                y|n) break ;;
                 '') r='y' && break ;;
            esac
        done

        [[ "$r" == 'y' ]] && browser $3 && terminal_frontmost
    else
        ok
    fi
}

# install a firefox extension. The installation process is manual, just like for the chrome process
function firefox_extension() {
    # abort function if firefox is not installed
    [[ ! -d '/Applications/Firefox.app' ]] && return
    [[ $# -ne 3 ]] && echo "Runtime error: firefox_extension require 3 arguments" && exit 1
    # argument 1, the name to be displayed
    # argument 2, the xpi filename to checked inside the extensions directory (if found, it's installed)
    # argument 3, the URL to open with firefox for launch manual installation
    local name=$(blue "$1")
    echo -n -e "Check $name firefox extension..."
    local profile="$(find ~/Library/Application\ Support/Firefox/Profiles -type d -depth 1 -name '*.default')"
    if [[ ! "$profile" || ! -f "$profile/extensions/$2" ]]; then
        notok
        while true; do
            echo -e -n "Install $name? [Yn]: "
            read r
            r=$(echo "$r" | tr '[A-Z]' '[a-z]')
            case "$r" in
                y|n) break ;;
                 '') r='y' && break ;;
            esac
        done

        [[ "$r" == 'y' ]] && open -a Firefox.app $3 && terminal_frontmost
    else
        ok
    fi
}

#
# check Git
#
echo -n "Check $(blue git)..."
if [[ ! "$(type -p git)" ]]; then
    notok
    echo 'Aborted: Git must be installed'
    sleep 1
    browser 'http://git-scm.com/download/mac'
    exit 1
fi
ok


#
# check Ruby
#
echo -n "Check $(blue ruby)..."
if [[ ! "$(type -p ruby)" || $(ruby -e "puts RUBY_VERSION >= '1.9.3'") == 'false' ]]; then
    notok
    echo 'Aborted: Ruby must be installed. Version 1.9.3 minimum'
    sleep 1
    browser 'https://rvm.io/'
    exit 1
fi
ok


#
# update existing ~/.dotfiles repositoy or clone it first the first time
#
if [[ -e ~/.dotfiles ]]; then
    cur=$(pwd)
    echo -n "Update $(blue ~/.dotfiles) repository..."
    cd ~/.dotfiles
    # capture error
    error=$(git pull --quiet 2>&1)
    exit_code=$?
    cd "$cur"
    if [[ $exit_code -ne 0 ]]; then
        notok
        echo $error
        echo 'Aborted: Error with git pull'
        exit 1
    fi
    ok
else
    echo -n "Install $(blue ~/.dotfiles) repository..."
    # capture error
    error=$(git clone --quiet https://github.com/jeromedecoster/dotfiles.git ~/.dotfiles 2>&1)
    if [[ $? -ne 0 ]]; then
        notok
        echo $error
        echo 'Aborted: Error with git clone'
        exit 1
    fi
    ok
fi


#
# check Phantomjs
#
echo -n "Check $(blue phantomjs)..."
function phantomjs_url() {
    local formula=`curl -s https://raw.github.com/mxcl/homebrew/master/Library/Formula/phantomjs.rb`
    echo "$formula" \
        | egrep ^[[:space:]]+url \
        | sed 's/^.*http/http/' \
        | sed 's/zip.*$/zip/'
}
function install_phantomjs() {
    tmp=`mktemp -d /tmp/phantomjs.XXXXX`
    curl -s -o $tmp/tmp.zip `phantomjs_url`
    unzip -q $tmp/tmp.zip "*bin/phantomjs" -d $tmp
    src=`find $tmp -type f -name "*phantomjs"`
    cp $src ~/.dotfiles/osx/bin/
    rm -rf $tmp
}
if [[ ! "$(type -p phantomjs)" ]]; then
    notok
    echo "Install $(blue phantomjs)"
    install_phantomjs
else
    url=`phantomjs_url`
    version=`echo $url | sed 's/^.*phantomjs-//' | sed 's/-.*$//'`
    if [[ "$(phantomjs -v)" != "$version" ]]; then
        notok
        echo "Update $(blue phantomjs)"
        install_phantomjs
    else
        ok
    fi
fi


# create backup folder
backup=~/.dotfiles/.backup/$(date +%Y-%m-%d--%H-%M-%S)
mkdir -p "$backup"

# copy files from ~/.dotfiles/osx/user folder to ~
# and backup already existing files to the backup folder
copy_files ~/.dotfiles/osx/user ~ $backup


#
# install chrome and firefox extensions
#
chrome_extension 'Adblock Plus'   'cfhdojbkjhnklbpkdaibdccddilifddb' \
                 'https://chrome.google.com/webstore/detail/empty-title/cfhdojbkjhnklbpkdaibdccddilifddb'
chrome_extension 'PrettyPrint'    'nipdlgebaanapcphbcidpmmmkcecpkhg' \
                 'https://chrome.google.com/webstore/detail/prettyprint/nipdlgebaanapcphbcidpmmmkcecpkhg'
chrome_extension 'JSON Formatter' 'bcjindcccaagfpapjjmafapmmgkkhgoa' \
                 'https://chrome.google.com/webstore/detail/json-formatter/bcjindcccaagfpapjjmafapmmgkkhgoa'
chrome_extension 'LiveReload'     'jnihajbhpnppcggbcgedagnkighmdlei' \
                 'https://chrome.google.com/webstore/detail/livereload/jnihajbhpnppcggbcgedagnkighmdlei'


firefox_extension 'Adblock Plus' '{d10d0bf8-f5b5-c8b4-a8b2-2b9879e08c5d}.xpi' \
                  'https://addons.mozilla.org/en-US/firefox/addon/adblock-plus/'

firefox_extension 'Firebug'      'firebug@software.joehewitt.com.xpi' \
                  'https://addons.mozilla.org/en-US/firefox/addon/firebug/'

# the next extensions require to restart Firefox
firefox_extension 'Net Export'   'netexport@getfirebug.com.xpi' \
                  'https://getfirebug.com/releases/netexport/'

firefox_extension 'DownThemAll'  '{DDC359D1-844A-42a7-9AA1-88A850A938A8}.xpi' \
                  'https://addons.mozilla.org/en-US/firefox/addon/downthemall/'

firefox_extension 'LiveReload'   'livereload@livereload.com.xpi' \
                  'http://help.livereload.com/kb/general-use/browser-extensions'


#
# check user permissions on /usr/local/lib/dtrace
#
echo -n "Check $(blue /usr/local/lib/dtrace) permissions..."
# the folder does not exist, simply create it
if [[ ! -d /usr/local/lib/dtrace ]]; then
    mkdir -p /usr/local/lib/dtrace
    ok
else
    # if we are not the owner of this folder, prompt to chown it
    if [[ "$(stat -f %u /usr/local/lib/dtrace)" != "$(id -u)" ]]; then
        notok
        echo "You are not the owner of the directory $(blue /usr/local/lib/dtrace)"
        echo "This may result some annoying $(red 'permissions denied') problems with nodejs"
        while true; do
            echo -n "Do you want to $(blue 'sudo chown') this directory? [Yn]: "
            read r
            r=$(echo "$r" | tr '[A-Z]' '[a-z]')
            case "$r" in
                y|n) break ;;
                 '') r='y' && break ;;
            esac
        done
        [[ "$r" == 'y' ]] && sudo chown `whoami` /usr/local/lib/dtrace
    else
        ok
    fi
fi


#
# removes some folders if stayed empty
#
if [[ $(empty $backup) -eq 1 ]]; then
    echo -e "Delete empty folder $(blue "$backup")" && rm -d $backup
fi
if [[ $(empty ~/.dotfiles/.backup) -eq 1 ]]; then
    echo -e "Delete empty folder $(blue "~/.dotfiles/.backup")" && rm -d ~/.dotfiles/.backup
fi
