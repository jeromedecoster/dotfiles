#!/bin/bash

# DESCRIPTION
# ===========
# open an uri in a browser or in the Finder
#
# with option [-cfs], will ask to browse with Chrome, Firefox or Safari

# DEPENDENCIES
# ============
# grealpath - is installed with the coreutils homebrew formula

usage() {
  { echo 'usage: browse [options] [uri]'
    echo 'option: -c browse in chrome'
    echo '        -f browse in firefox'
    echo '        -s browse in safari'
    exit 1
  } >&2
}

abort() {
  { echo "browse: $1"
    exit 1
  } >&2
}

# open with Finder, force column view
finder() {
  local cmd
  arch -i386 pwd &>/dev/null
  [[ $? -eq 0 ]] && cmd="arch -i386 osascript" || cmd="osascript"
  eval "$cmd" <<EOF
    tell application "System Events"
      set app_title to (title of application processes whose frontmost is true) as string
    end tell
    tell application "Finder"
      activate
      open ("$absolute" as POSIX file)
      set current view of front window to column view
    end tell
    if app_title is equal to "iTerm" then
      tell application "iTerm" to activate
    else if app_title is equal to "Terminal" then
      tell application "Terminal" to activate
    end if
EOF
}

# open with Chrome
# display and reload an existing tab if the url is already displayed
# or update the current tab if it's the 'chrome://newtab/' starting view
# or create a new tab
chrome() {
  local cmd
  arch -i386 pwd &>/dev/null
  [[ $? -eq 0 ]] && cmd="arch -i386 osascript" || cmd="osascript"
  eval "$cmd" <<EOF
    set launched to true
    if application "Google Chrome" is not running then
      set launched to false
      tell application "Google Chrome" to activate
      delay 0.5
    end if
    on curtab(pUrl)
      tell application "Google Chrome" to set URL of active tab of front window to pUrl
    end curtab
    on geturl(pUrl)
      repeat while true
        if pUrl ends with "/" then
          set pUrl to text 1 through ((count of pUrl) - 1) of pUrl
        else
          exit repeat
        end if
      end repeat
      set pUrl to text ((offset of "//" in pUrl) + 2) through ((count of pUrl) - 1) of pUrl
      return pUrl
    end geturl
    tell application "Google Chrome"
      activate
      if launched is false then
        curtab("$1") of me
      else
        if (count of properties of windows) is 0 then
          make new window
          curtab("$1") of me
        else
          set ok to false
          set ref_url to geturl("$1") of me
          repeat with win in windows
            set idx to 0
            repeat with t in tabs of win
              set idx to idx + 1
              set cur_url to geturl(get URL of t) of me
              if cur_url is equal to ref_url then
                set ok to true
                set the index of win to 1
                set active tab index of first window to idx
                reload the active tab of first window
                exit repeat
              end if
            end repeat
            if ok = true
              exit repeat
            end if
          end repeat
          if ok = false
            if URL of active tab of front window is "chrome://newtab/" then
              curtab("$1") of me
            else
              tell front window to make new tab
              curtab("$1") of me
            end if
          end if
        end if
      end if
    end tell
EOF
}

console_frontmost() {
  local cmd
  arch -i386 pwd &>/dev/null
  [[ $? -eq 0 ]] && cmd="arch -i386 osascript" || cmd="osascript"
  if [[ $TERM_PROGRAM == 'iTerm.app' ]]; then
    # sets iTerm as the foreground application on screen
    # no solution found to set only the frontmost window
    eval "$cmd" <<EOF
    tell application "iTerm"
      activate
    end tell
EOF
  elif [[ $TERM_PROGRAM == 'Apple_Terminal' ]]; then
    # sets the frontmost opened Terminal window as the foreground window on screen
    # and sets the other terminal windows to the background. It's a dirty hack because
    # activate set all the windows of an application to the foreground
    eval "$cmd" <<EOF
      tell application "Terminal"
        activate
        set skip to true
        repeat with e in windows
          try
            if not skip then
              set frontmost of e to false
            end if
            set skip to false
          end try
        end repeat
        log ""
      end tell
EOF
  fi
}

# open with a browser (if a specific browser is requested or if it's installed)
browser() {
  if [[ -z "$app" && $chrome -eq 1 || $app == 'chrome' ]]; then
    chrome "$uri"
  elif [[ -z "$app" && $firefox -eq 1 || $app == 'firefox' ]]; then
    open -a Firefox.app "$uri"
  elif [[ -z "$app" && $safari -eq 1 || $app == 'safari' ]]; then
    open -a Safari.app "$uri"
  else
    abort 'no browser found'
  fi
  console_frontmost
}


[[ -d '/Applications/Google Chrome.app' ]] && chrome=1
[[ -d '/Applications/Firefox.app' ]] && firefox=1
[[ -d '/Applications/Safari.app' ]] && safari=1
uri=

for e in "${@}"; do
  # it's a valid argument
  if [[ "$e" =~ ^-[cfs]$ ]]; then
    case "$e" in
      '-c') [[ -n "$chrome" ]]  && app=chrome  || abort 'Chrome not found' ;;
      '-f') [[ -n "$firefox" ]] && app=firefox || abort 'Firefox not found' ;;
      '-s') [[ -n "$safari" ]]  && app=safari  || abort 'Safari not found' ;;
    esac
  elif [[ -z "$uri" ]]; then
    uri="$e"
  else
    usage
  fi
done

# no uri defined
if [[ -z "$uri" ]]; then
  uri=`pwd`
  absolute="$uri"
else
  # remove starting 'file://' and trailing '/'
  uri=`echo "$uri" | sed -e 's/^file:\/\///' -e 's/\/*$//'`
  tmp=`grealpath "$uri"`
  # if the absolute path exists
  [[ -e "$tmp" ]] && absolute="$tmp"
fi

# absolute path
if [[ -n "$absolute" ]]; then
  # some extensions will open the browser
  if [[ "$uri" =~ \.(html|htm|css|js)$ ]]; then
    uri="file://$tmp"
    html=1
  # if it's a file
  elif [[ -f "$absolute" ]]; then
    absolute=`dirname "$absolute"`
  fi
fi

if [[ -n "$absolute" ]]; then
  [[ -n "$html" ]] && browser || finder
else
  # browsers require full url (starting with http://)
  [[ ! "$uri" =~ ^http ]] && uri="http://$uri"

  browser
fi
