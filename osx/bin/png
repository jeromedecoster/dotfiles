#!/bin/bash

# DESCRIPTION
# ===========
# compress and/or optimize png
# png optimization is more difficult than jpeg optimization because there is several profiles:
# - png 8 with color palette or png 24 with true color
# - with or without alpha
# - regular image or image with few colors
# and each profile require specific treatment to be optimized
#
# png optimizers usually only removes extra datas: color profiles, exif datas, comments
# they also turn on/off interlace mode and posterize 'quantize' to reduce colors
# this command can do this, but this main goal is to adopt the best strategy for each png to:
# - keep the best quality possible
# - reduce more than the other optimizers
# - choose a jpeg compression if this is more appropriate
#
# this command exports a new compressed png, corresponding to a predefined usage profile
# you choose between 4 profiles with the following arguments:
# -4 : target a desktop high quality image
# -3 : target a desktop regular quality image
# -2 : target a mobile regular quality image
# -1 : target a mobile low quality image
#
# the option -a does not exports a png but analyses the reference png and returns some datas:
# the first number is an indice. It correspond to the png quality
#
# example 1: if you obtain the indice 1.0, it means the filesize of the reference png correspond to
# the same filesize of a png created with the option -1, the mobile low quality.
# so, if the file was supposed to be used on a desktop site, this indice alerts you that the quality is too poor
#
# example 2: if you obtain the indice 7.0, it means the filesize of the reference png is really above
# the filesize of a png created with the option -4, the desktop high quality, which have the indice 4.0.
# so, if the file was supposed to be used on a regular desktop site, this indice alerts you that the filesize
# is really too high
#
# the 4 following returned datas are the percentage gain for quality -1 to -4
#
# the following returned data indicates if the reference png as alpha or not, with a flag 'a' or '-'
#
# the following returned data indicates if the reference png is interlaced or not, with a flag 'i' or '-'
#
# the last data indicates if the reference png contains extra profile datas or not, with a flag 'e' or '-'
#
# several other options are available, look the usage message

# DEPENDENCIES
# ============
# convert   - is installed with imagemagick
# gstat     - is installed with the coreutils homebrew formula
# gdate     - is installed with the coreutils homebrew formula
# identify  - is installed with imagemagick
# img       - is my ~/.dotfiles/osx/bin/img executable
# map       - is my ~/.dotfiles/osx/bin/map executable
# optipng   - is installed with the optipng homebrew formula
# posterize - is my ~/.dotfiles/osx/bin/posterize executable
# pngcrush  - is installed with the pngcrush homebrew formula
# pngquant  - is the ~/.dotfiles/osx/bin/pngquant executable


# write the usage message in the stderr and exit 1
usage() {
  { echo 'usage: png [options] [file]'
    echo '       png [options] [directory]'
    echo 'option: -a analysis'
    echo '        -d output directory'
    echo '        -i interlaced'
    echo '        -o output file'
    echo '        -q quiet'
    echo '        -r recursive'
    echo '        -4 desktop high'
    echo '        -3 desktop'
    echo '        -2 mobile'
    echo '        -1 mobile low'
    exit 1
  } >&2
}

abort() {
  echo "png: $1" >&2
  exit 1
}

analysis=
directory=
interlaced=
file=
path=
progressive=1
quality=
quiet=
raw=
recursive=

while [[ $# -ne 0 ]]; do
  case $1 in
    -a) analysis=1 ;;
    -d) shift
        [[ -n "$directory" ]] && abort 'option -d can be used only once'
        [[ -f "$1" ]]         && abort 'option -d can not target a file'
        [[ -n "$file" ]]      && abort 'options -d and -o can not be used together'
        directory="$1"
      ;;
    -h) usage        ;;
    -i) interlaced=1 ;;
    -o) shift
        [[ -n "$file" ]]      && abort 'option -o can be used only once'
        [[ -d "$1" ]]         && abort 'option -o can not target a directory'
        [[ -n "$directory" ]] && abort 'options -d and -o can not be used together'
        file="$1"
      ;;
    -q) quiet=1     ;;
    -r) recursive=1 ;;
    -w) raw=1       ;;
    -1|-2|-3|-4) quality=${1:1} ;;
     *) [[ ! -f "$1" ]]  && usage
        [[ -n "$path" ]] && abort 'the target file must be defined only once'
        path="$1"
      ;;
  esac
  shift
done

# if no path is given, works with pwd
# otherwise remove trailing slash
[[ -z "$path" ]] && path=. || path=`echo "$path" | sed 's/\/*$//'`


# parse $result and create $stats
# $stats contains the inlined following datas:
# - palette type: 8 or 24
# - colors count
# - alpha detected: a or -
# - interlaced detected: i or -
# - extra datas detected: e or -
set_stats() {
  stats=
  [[ -z `echo "$result" | grep "Format: PNG"` ]] && return

  local typ=`echo "$result" | grep 'Type:'`
  local pal=24
  [[ -n `echo "$typ" | grep "Type: Palette"` ]] && pal=8
  local col=`echo "$result" | grep 'Colors:' | sed -E 's/[^0-9]//g'`
  local alp=-
  if [[ -n `echo "$typ" | grep 'Alpha'` ]]; then
    local tmp=`echo "$result" | head -n 1 | sed 's/Image: //'`
    [[ -n `convert "$tmp" -format %c histogram:info:- | grep -v ",255) #"` ]] && alp=a
  fi
  local int=-
  [[ -n `echo "$result" | grep 'Interlace: PNG'` ]] && int=i
  local ext=-
  [[ -n `echo "$result" | grep 'png:text:'` || -n `echo "$result" | grep 'png:text:'` ]] && ext=e
  stats="$pal $col $alp $int $ext"
}

# checks if the png will has better compression if exported as jpeg
# the ratio 0.55 is based on personnal tests
# return 1 if jpeg format is a better choice
# otherwise return nothing
check_jpeg() {
  local col100=`identify -format %k "$temp/quant100.png"`
  local col90=`identify -format %k "$temp/quant90.png"`
  local col80=`identify -format %k "$temp/quant80.png"`
  local ratio=`map $col90 $col80 $col100 0 1 2`
  awk -v r=$ratio 'BEGIN { if (r >= 0.55) { print 1 } }'
}

# checks if the png has few colors
check_few_colors() {
  local col90=`identify -format %k "$temp/quant90.png"`
  awk "BEGIN { if ($col90 <= 32) { print 1 } }"
}

# create the png with pngquant then optimize it with optipng
# $1 : the original file
# $2 : the desired $quality
# $3 : optional argument, if 'few' image created will be optimized for image with few colors
create() {
  # if a png with few colors is previously detected, the third argument must be 'few'
  # it will result better quality with a fixed color count factor instead of a quality based factor
  if [[ "$3" = 'few' ]]; then
    local colors=`echo "$stats" | cut -d ' ' -f 2`
    [[ $colors -gt 256 ]] && colors=256
    local step=`echo "($colors - 32) / 4" | bc`
    local col
    case $2 in
      1) col=`echo "$colors - $step * 4" | bc` ;;
      2) col=`echo "$colors - $step * 3" | bc` ;;
      3) col=`echo "$colors - $step * 2" | bc` ;;
      4) col=`echo "$colors - $step" | bc` ;;
    esac
    # exports only if the file does not already exists
    if [[ ! -f "$temp/quant${2}.png" ]]; then
      pngquant "$col" --speed 1 "$l" -o "$temp/quant${2}.png"
    fi
  # not in low mode, compress with --quality option to have better result
  else
    local qua
    case $2 in
      1) qua=40 ;;
      2) qua=53 ;;
      3) qua=67 ;;
      4) qua=80 ;;
    esac
    # exports only if the file does not already exists
    if [[ ! -f "$temp/quant${2}.png" ]]; then
      pngquant --quality=0-"$qua" --speed 1 "$1" -o "$temp/quant${2}.png"
    fi
  fi
  # optimize
  if [[ -z "$interlaced" ]]; then
    optipng -fix -o4 -i 0 -q "$temp/quant${2}.png" -out "$temp/quant${2}.png"
  else
    optipng -fix -o4 -i 1 -q "$temp/quant${2}.png" -out "$temp/quant${2}.png"
  fi
}

# optimize png with pngcrush
# pngcrush wins more or less the same size than optipng but it is better to remove extra datas
# pngcrush is useful when the file is not generated by pngquant
optimize() {
  pngcrush -rem tIME -rem text -rem bKGD -fix -q "$1" "$temp/optimize.png"
  # interlace
  [[ -n "$interlaced" ]] && optipng -q -backup -o1 -i 1 "$temp/optimize.png" -out "$temp/optimize.png"
}

# without raw mode, color_indice is used to adds color
color_indice() {
  # warning: whitout 'echo | awk' you must use BEGIN instead END otherwise it fails
  # silently in 'echo "$files" | while read l; do' below
  local sign=`awk -v a=$1 'BEGIN { if (a > 4) { print "+" } else if (a < 1) { print "-" } }'`
  if [[ "$sign" == '-' ]]; then
    echo -e "$STDOUT_WARNING$1$COL_RES"
  elif [[ "$sign" == '+' ]]; then
    echo -e "$STDOUT_NOTOK$1$COL_RES"
  else
    echo -e "$STDOUT_OK$1$COL_RES"
  fi
}

# the percentage of evolution from $1 to $2
# $1 : the reference value
# $2 : the new value
percent() {
  # awk is used to compute float easily
  awk -v from=$1 -v to=$2 'BEGIN{
    a = (to - from) / from * 100
    a = sprintf ("%.1f", a)
    sub(/,/, ".", a)
    if (a == "-0.0") { a = "0.0" }
    print a
  }'
}

# without raw mode, color_percent is used to adds signs, % char and color
color_percent() {
  if [[ ${1:0:1} == '-' ]]; then
    echo -e "$STDOUT_OK$1%$COL_RES"
  elif [[ $1 == '0.0' ]]; then
    echo -e "$STDOUT_HIGHLIGHT$1%$COL_RES"
  else
    echo -e "$STDOUT_NOTOK+$1%$COL_RES"
  fi
}

# copy generated file to the correct destination
# $1 : the original file
# $2 : the created or optimized file in the temp directory
copy_dest() {
  local base="`basename "$1"`"
  local filename="${base%.*}"
  local dest dir filename timestamp

  if [[ -n "$directory" ]]; then
    dest="$directory/$filename.png"
  elif [[ -n "$file" ]]; then
    dest="$file"
  # without $file or $directory, the file is generated with a timestamp
  # from path/to/file.jpg to path/to/file-165600437.jpg
  else
    dir=`dirname "$1"`
    filename="${base%.*}"
    # if $dir/$filename.png already exists, the file is generated with a timestamp
    # from path/to/file.png to path/to/file-165600437.png
    if [[ -f "$dir/$filename.png" ]]; then
      timestamp=`gdate +%H%M%S%N | cut -c 1-9`
      dest="$dir/$filename-$timestamp.png"
    # no timestamp needed
    else
      dest="$dir/$filename.png"
    fi
  fi

  # remove starting './'
  [[ "${dest:0:2}" == './' ]] && dest="${dest:2}"

  dir=`dirname "$dest"`
  [[ "$dir" != '.' ]] && mkdir -p "$dir"

  # existing $dest file is overwritten
  cp "$2" "$dest"

  # not in quiet mode, displays informations about compression
  if [[ -z "$quiet" ]]; then
    # computes the compression gain
    perc=`percent $(gstat -c%s "$1") $(gstat -c%s "$dest")`

    # without raw mode, the percentage is colored
    [[ -z "$raw" ]] && perc=`color_percent $perc`

    echo "$perc $dest"
  fi
}

# exit 0 or 1 if log contains a reported error
checklog_and_exit() {
  local error=
  [[ `cat $log` -eq 1 ]] && error=1
  rm -rf $log

  [[ -n "$error" ]] && exit 1 || exit 0
}

# collect $files. If $path is a file, treat only this file
if [[ -f "$path" ]]; then
  files="$path"
# otherwise, collect all png in the $path directory
else
  depth='-maxdepth 0'
  [[ -n "$recursive" ]] && depth=
  files=`eval "find $path/* -type f $depth -name '*.png' 2>/dev/null"`
fi

# no files to treat
[[ -z "$files" ]] && exit 0

# create temp log file to report error
log=`mktemp /tmp/log.XXXXX`

# analysis mode, no png will be created
if [[ "$analysis" -eq 1 ]]; then

  echo "$files" | while read l; do

    # creates the png in a $temp directory
    temp=`mktemp -d /tmp/png.XXXXX`

    fmt=`identify -format %m "$l" 2>/dev/null`
    if [[ -z "$fmt" ]]; then
      echo "png: '$l' is not valid" >&2
      # report an error in the log and skip this loop
      echo -n 1 > $log
      rm -rf $temp
      continue
    fi

    if [[ "$fmt" != 'PNG' ]]; then
      echo check alpha
      img "$l" -o "$temp/img"
      if [[ -n `grep '^Alpha: False' "$temp/img"` ]]; then
        convert "$l[0]" PNG24:"$temp/from.png"
      else
        convert "$l[0]" PNG32:"$temp/from.png"
      fi
    else
      cp "$l" "$temp/from.png"
    fi
    from="$temp/from.png"

    img "$from" -o "$temp/img"
    result=`cat "$temp/img"`

    set_stats

    # in rare cases, some png files include some special color profiles
    # this color profile will be removed and the color of the image will slightly be different
    # there is no possibity to keep exactly the same color instead open the image in Photoshop
    # and export it with a regular sRGB color profile
    if [[ -n `echo "$result" | grep 'png:iCCP'` ]]; then
      echo "png: warning color profile detected for '$l'" >&2
    fi

    # create the png files
    png "$from" -1 -q -o "$temp/1.png"
    png "$from" -2 -q -o "$temp/2.png"
    png "$from" -3 -q -o "$temp/3.png"
    png "$from" -4 -q -o "$temp/4.png"

    ref=`gstat -c%s "$l"`
    size1=`gstat -c%s "$temp/1.png"`
    size2=`gstat -c%s "$temp/2.png"`
    size3=`gstat -c%s "$temp/3.png"`
    size4=`gstat -c%s "$temp/4.png"`

    # compute and display the filesize indice
    # if you create an image with option -1, the filesize of the generated correspond to the index 1.0
    # with option -2, the index is 2.0
    # with option -3, the index is 3.0
    # with option -4, the index is 4.0
    # check the filesize of the reference file $l and remap it into this indices range
    # ie: if the computed indice is 4.5, it means reference file is slightly greater than if you create the png
    # with the option -4
    # the indice 4.0 correspond to a great quality for desktop
    # so, if the reference file is supposed to be used on mobile, this indice shows you that the current size is
    # really too big
    # also, if the computed indice is -3.5, it means reference file is really lower than if you create the png
    # with the option -1
    # so it's not a good idea to create a new png, the filesize would be increased
    if [[ $ref -le $size2 ]]; then
      indice=`map $ref $size1 $size2 1 2 1`
    elif [[ $ref -le $size3 ]]; then
      indice=`map $ref $size2 $size3 2 3 1`
    else
      indice=`map $ref $size3 $size4 3 4 1`
    fi

    # if map returns an integer, adds a trailing .0
    [[ -z `echo $indice | grep '\.'` ]] && indice="$indice.0"

    # displays the indice. Without raw mode, it is colored
    [[ -z "$raw" ]] && echo -n "`color_indice $indice` " || echo -n "$indice "

    # compute and display the filesize diff for every exported quality, options -1 to -4
    # to simplify the readability, the percentage will be slightly faked if the indice match
    # a perfect 1.0 or 2.0 .. or 4.0
    # before that, we could have indice 1.0 and -0.1%, it's more accurate, but not really readable or useful
    # the goal of this command is not to win 10 bytes, but 10 or 100 ko

    # displays the percentage for the quality 1
    [[ $indice == '1.0' ]] && perc='0.0' || perc=`percent $ref $size1`
    [[ -z "$raw" ]] && perc=`color_percent $perc`
    echo -n "$perc "

    # displays the percentage for the quality 2
    [[ $indice == '2.0' ]] && perc='0.0' || perc=`percent $ref $size2`
    [[ -z "$raw" ]] && perc=`color_percent $perc`
    echo -n "$perc "

    # displays the percentage for the quality 3
    [[ $indice == '3.0' ]] && perc='0.0' || perc=`percent $ref $size3`
    [[ -z "$raw" ]] && perc=`color_percent $perc`
    echo -n "$perc "

    # displays the percentage for the quality 4
    [[ $indice == '4.0' ]] && perc='0.0' || perc=`percent $ref $size4`
    [[ -z "$raw" ]] && perc=`color_percent $perc`
    echo -n "$perc "

    echo "$stats $l"

    rm -rf $temp
  done

  checklog_and_exit
fi


# creates png
echo "$files" | while read l; do

  # creates the png in a $temp directory
  temp=`mktemp -d /tmp/png.XXXXX`

  fmt=`identify -format %m "$l" 2>/dev/null`
  if [[ -z "$fmt" ]]; then
    echo "png: '$l' is not valid" >&2
    # report an error in the log and skip this loop
    echo -n 1 > $log
    rm -rf $temp
    continue
  fi

  if [[ "$fmt" != 'PNG' ]]; then
    # echo check alpha
    img "$l" -o "$temp/img"
    if [[ -n `grep '^Alpha: False' "$temp/img"` ]]; then
      convert "$l[0]" PNG24:"$temp/from.png"
    else
      convert "$l[0]" PNG32:"$temp/from.png"
    fi
  else
    cp "$l" "$temp/from.png"
  fi
  from="$temp/from.png"

  img "$from" -o "$temp/img"
  result=`cat "$temp/img"`

  set_stats

  # in rare cases, some png files include some special color profiles
  # this color profile will be removed and the color of the image will slightly be different
  # there is no possibity to keep exactly the same color instead open the image in Photoshop
  # and export it with a regular sRGB color profile
  if [[ -n `echo "$result" | grep 'png:iCCP'` ]]; then
    echo "png: warning color profile detected for '$l'" >&2
  fi

  # png without alpha
  if [[ `echo "$stats" | cut -d ' ' -f 3` == '-' ]]; then

    # export 3 png with pngquant to check if it is not better to compress it as jpeg
    # use 0-n quality to prevents pngquant exitcode 90
    pngquant --quality=0-100 --speed 1 "$l" -o "$temp/quant100.png"
    pngquant --quality=0-90 --speed 1 "$l" -o "$temp/quant90.png"
    pngquant --quality=0-80 --speed 1 "$l" -o "$temp/quant80.png"

    # the png will be exported as jpeg datas
    # the name will be file.png but in reality it is a real jpeg
    if [[ -n `check_jpeg` ]]; then
      convert -quality 100 "$l" "$temp/convert.jpg"
      if [[ -n "$quality" ]]; then
        jpeg "$temp/convert.jpg" -"$quality" -q -o "$temp/jpeg.jpg"
      else
        jpeg "$temp/convert.jpg" -4 -q -o "$temp/jpeg.jpg"
      fi
      copy_dest "$l" "$temp/jpeg.jpg"

    # regular png
    else
      # without $quality, just optimize
      if [[ -z "$quality" ]]; then
        optimize "$l"
        copy_dest "$l" "$temp/optimize.png"

      # the png has few colors
      elif [[ -n `check_few_colors` ]]; then
        create "$l" $quality few
        copy_dest "$l" "$temp/quant${quality}.png"

      # $quality is setted and regular png
      else
        mv "$temp/quant80.png" "$temp/quant4.png"
        create "$l" $quality
        copy_dest "$l" "$temp/quant${quality}.png"
      fi
    fi

  # png with alpha
  else
    # without $quality, just optimize
    if [[ -z "$quality" ]]; then
      optimize "$l"
      copy_dest "$l" "$temp/optimize.png"

    # $quality is setted, each quality has a special encoding
    #
    # important: when the png has alpha, pngquant creates images slightly more saturated, this can be a real problem
    # that is why we only use below posterize for quality 3 and 4
    # then pngquant for mobile optimization
    # note: with alpha we do not use pngquant quality 1 and 2 as expected but 2 and 4 for better quality result
    else
      if [[ $quality -eq 4 ]]; then
        posterize -4 "$l" -q -o "$temp/posterize.png"
        optimize "$temp/posterize.png"
        copy_dest "$l" "$temp/optimize.png"

      else
        posterize -1 "$l" -q -o "$temp/posterize.png"

        if [[ $quality -eq 3 ]]; then
          optimize "$temp/posterize.png"
          copy_dest "$l" "$temp/optimize.png"

        elif [[ $quality -eq 2 ]]; then
          create "$temp/posterize.png" 4
          copy_dest "$l" "$temp/quant4.png"

        else
          create "$temp/posterize.png" 2
          copy_dest "$l" "$temp/quant2.png"
        fi
      fi
    fi
  fi

  rm -rf $temp
done

checklog_and_exit
