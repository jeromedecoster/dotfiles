#!/bin/bash

# DESCRIPTION
# ===========
# compress and/or optimize png
# png optimization is more difficult than jpeg optimization because there is several profiles:
# - png 8 with color palette or png 24 with true color
# - with or without alpha
# - regular image or image with few colors
# and each profile require specific treatment to be optimized
#
# png optimizers usually only removes extra datas: color profiles, exif datas, comments
# they also turn on/off interlace mode and posterize 'quantize' to reduce colors
# this command can do this, but this main goal is to adopt the best strategy for each png to:
# - keep the best quality possible
# - reduce more than the other optimizers
#
# this command exports a new compressed png, corresponding to a predefined usage profile
# you choose between 4 profiles with the following arguments:
# -3 : target a desktop high quality image
# -2 : target a desktop regular quality image
# -1 : target a mobile high quality image
#
# the option -a does not exports a png but analyses the reference png and returns some datas:
# the first number is an indice. It correspond to the png quality
#
# example 1: if you obtain the indice 1.0, it means the filesize of the reference png correspond to
# the same filesize of a png created with the option -1, the low quality preset.
# so, if the file was supposed to be used on a desktop site, this indice alerts you that the quality is too poor
#
# example 2: if you obtain the indice 7.0, it means the filesize of the reference png is really above
# the filesize of a png created with the option -3, the desktop high quality, which have the indice 3.0.
# so, if the file was supposed to be used on a regular desktop site, this indice alerts you that the filesize
# is really too high
#
# the 3 following returned datas are the percentage gain for quality -1 to -3
#
# the following returned data indicates if the reference png as alpha or not, with a flag 'alpha' or '-'
#
# the following returned data indicates if the reference png is interlaced or not, with a flag 'inter' or '-'
#
# the last data indicates if the reference png contains extra profile datas or not, with a flag 'data' or '-'
#
# several other options are available, look the usage message

# DEPENDENCIES
# ============
# convert   - is installed with imagemagick
# gstat     - is installed with the coreutils homebrew formula
# identify  - is installed with imagemagick
# map       - is my ~/.dotfiles/osx/bin/map executable
# optipng   - is installed with the optipng homebrew formula
# pngcrush  - is installed with the pngcrush homebrew formula
# pngquant  - is the ~/.dotfiles/osx/bin/pngquant executable


# write the usage message in the stderr and exit 1
usage() {
  { echo 'usage: png [options] [file]'
    echo '       png [options] [directory]'
    echo 'option: -a analysis'
    echo '        -d output directory'
    echo '        -i interlaced'
    echo '        -o output file'
    echo '        -q quiet'
    echo '        -r recursive'
    echo '        -w raw log, no colors'
    echo '        -3 high quality'
    echo '        -2 medium quality'
    echo '        -1 low quality'
    exit 1
  } >&2
}

abort() {
  echo "png: $1" >&2
  exit 1
}

COL_BLU='\033[0;34m'
COL_CYA='\033[0;36m'
COL_GRE='\033[0;32m'
COL_PIN='\033[0;35m'
COL_RED='\033[0;31m'
COL_RES='\033[0m'

analysis=
directory=
interlaced=
file=
path=
quality=
quiet=
raw=
recursive=

while [[ $# -ne 0 ]]; do
  case $1 in
    -a) analysis=1 ;;
    -d) shift
        [[ -n "$directory" ]] && abort 'option -d can be used only once'
        [[ -f "$1" ]]         && abort 'option -d can not target a file'
        [[ -n "$file" ]]      && abort 'options -d and -o can not be used together'
        directory="$1"
      ;;
    -h) usage        ;;
    -i) interlaced=1 ;;
    -o) shift
        [[ -n "$file" ]]      && abort 'option -o can be used only once'
        [[ -d "$1" ]]         && abort 'option -o can not target a directory'
        [[ -n "$directory" ]] && abort 'options -d and -o can not be used together'
        file="$1"
      ;;
    -q) quiet=1     ;;
    -r) recursive=1 ;;
    -w) raw=1       ;;
    -1|-2|-3) quality=${1:1} ;;
    -*) abort 'option unknown' ;;
     *) [[ ! -f "$1" ]]  && usage
        [[ -n "$path" ]] && abort 'the target file must be defined only once'
        path="$1"
      ;;
  esac
  shift
done

# abort if no output is defined
[[ -z "$analysis" && -z "$file" && -z "$directory" ]] && abort 'option -d or -o must be defined'

# if no path is given, works with pwd
# otherwise remove trailing slash
[[ -z "$path" ]] && path=. || path=`echo "$path" | sed 's/\/*$//'`

# parse identify and create vars: $alpha, $from, $colors and $stats
# $stats contains the inlined following datas:
# - palette type: 8 or 24
# - colors count
# - alpha detected: alpha or -
# - interlaced detected: inter or -
# - extra datas detected: data or -
prepare() {
  local ident=`identify -verbose "$1[0]"`

  alpha=
  [[ -n `echo "$ident" | grep -E '^[ ]+Alpha:$'` ]] && alpha=1
  
  if [[ "$format" != 'PNG' ]]; then
    local typ=PNG24
    [[ -n "$alpha" ]] && typ=PNG32
    # convert to PNG
    convert "$1[0]" $typ:"$temp/from.png"
    from="$temp/from.png"
  else
    from="$1"
  fi
  
  colors=`identify -format %k "$1[0]"`
  
  local typ=`echo "$ident" | grep -E '^[ ]+Type:'`
  local pal=24
  [[ -n `echo "$typ" | grep 'Palette$'` ]] && pal=8
  local alp=-
  [[ -n "$alpha" ]] && alp=alpha
  local int=-
  [[ -n `echo "$ident" | grep -E '^[ ]+Interlace: PNG$'` ]] && int=inter
  local dat=-
  [[ -n `echo "$ident" | grep -E '^[ ]+png:text:'` ]] && dat=data
  stats="$pal $colors $alp $int $dat"
}

# checks if the png has few colors
check_few_colors() {
  few=
  quantize "$from" 3 
  local col=`identify -format %k "$temp/quantize.png"`
  [[ $col -le 32 ]] && few=1
}

# create the png with pngquant
# $1 : the original file
# $2 : the desired quality (1, 2 or 3)
# $3 : optional argument, if 'few' image created will be optimized for image with few colors
quantize() {
  # if a png with few colors is previously detected, the third argument must be 'few'
  # it will result better quality with a fixed color count factor instead of a quality based factor
  if [[ "$3" = 'few' ]]; then
    local col=$colors
    [[ $col -gt 256 ]] && col=256
    local step=`echo "($col - 32) / 4" | bc`
    case $2 in
      3) col=`echo "$col - $step" | bc` ;;
      2) col=`echo "$col - $step * 2" | bc` ;;
      1) col=`echo "$col - $step * 3" | bc` ;;
    esac
    pngquant "$col" --speed 1 "$1" --force -o "$temp/quantize.png"
  else
    local qua
    case $2 in
      3) qua=90 ;;
      2) qua=80 ;;
      1) qua=70 ;;
    esac
    pngquant --quality=0-"$qua" --speed 1 "$1" --force -o "$temp/quantize.png"
  fi
}

# create interlaced png
# tip: never call pngcrush on an already optimized png with optipng, in rare cases pngcrush
# will not successfully work (impossible to remove extra data)
interlace() {
  optipng -i 1 -q "$1" -out "$1"
}

# optimize png with pngcrush
# pngcrush wins more or less the same size than optipng but it is better to remove extra datas
# pngcrush is especially useful to remove gAMA data added by imagemagick or pngquant
crush() {
  # tip: -m 10 force the gAMA removal (otherwise fails sometimes)
  pngcrush -rem tIME -rem text -rem bKGD -rem gAMA \
           -m 1 -m 4 -m 7 -m 10 -fix -q "$1" "$temp/crush.png"
  mv -f "$temp/crush.png" "$1"
}

# without raw mode, color_indice is used to adds color
color_indice() {
  # warning: whitout 'echo | awk' you must use BEGIN instead END otherwise it fails
  # silently in 'echo "$files" | while read l; do' below
  local sign=`awk -v a=$1 'BEGIN { if (a > 4) { print "+" } else if (a < 1) { print "-" } }'`
  if [[ "$sign" == '-' ]]; then
    echo -e "$COL_PIN$1$COL_RES"
  elif [[ "$sign" == '+' ]]; then
    echo -e "$COL_RED$1$COL_RES"
  else
    echo -e "$COL_GRE$1$COL_RES"
  fi
}

# the percentage of evolution from $1 to $2
# $1 : the reference value
# $2 : the new value
percent() {
  # awk is used to compute float easily
  awk -v from=$1 -v to=$2 'BEGIN{
    a = (to - from) / from * 100
    a = sprintf ("%.1f", a)
    sub(/,/, ".", a)
    if (a == "-0.0") { a = "0.0" }
    print a
  }'
}

# without raw mode, color_percent is used to adds signs, % char and color
color_percent() {
  if [[ ${1:0:1} == '-' ]]; then
    echo -e "$COL_GRE$1%$COL_RES"
  elif [[ $1 == '0.0' ]]; then
    echo -e "$COL_BLU$1%$COL_RES"
  else
    echo -e "$COL_RED+$1%$COL_RES"
  fi
}

# copy generated file to the correct destination
# $1 : the original file
# $2 : the quantized or optimized file in the temp directory
copy_dest() {
  local dest

  if [[ -n "$directory" ]]; then
    local base="`basename "$1"`"
    local filename="${base%.*}"
    dest="$directory/$filename.png"
  elif [[ -n "$file" ]]; then
    dest="$file"
  fi

  # remove starting './'
  [[ "${dest:0:2}" == './' ]] && dest="${dest:2}"

  local dir=`dirname "$dest"`
  [[ "$dir" != '.' ]] && mkdir -p "$dir"

  # existing $dest file is overwritten
  cp "$2" "$dest"

  # not in quiet mode, displays informations about compression
  if [[ -z "$quiet" ]]; then
    # computes the compression gain
    perc=`percent $(gstat -c%s "$1") $(gstat -c%s "$dest")`

    # without raw mode, the percentage is colored
    [[ -z "$raw" ]] && perc=`color_percent $perc`

    echo "$perc $dest"
  fi
}

# exit 0 or 1 if log contains a reported error
checklog_and_exit() {
  local error=
  [[ `cat $log` -eq 1 ]] && error=1
  rm -rf $log

  [[ -n "$error" ]] && exit 1 || exit 0
}

# collect $files. If $path is a file, treat only this file
if [[ -f "$path" ]]; then
  files="$path"
# otherwise, collect all png in the $path directory
else
  depth='-maxdepth 0'
  [[ -n "$recursive" ]] && depth=
  files=`eval "find $path/* -type f $depth -name '*.png' 2>/dev/null"`
fi

# no files to treat
[[ -z "$files" ]] && exit 0

# create temp log file to report error
log=`mktemp /tmp/log.XXXXX`

# analysis mode, no png will be created
if [[ "$analysis" -eq 1 ]]; then

  echo "$files" | while read l; do

    # creates the png in a $temp directory
    temp=`mktemp -d /tmp/png.XXXXX`

    format=`identify -format %m "$l[0]" 2>/dev/null`
    if [[ -z "$format" ]]; then
      echo "png: '$l' is not valid" >&2
      # report an error in the log and skip this loop
      echo -n 1 > $log
      rm -rf $temp
      continue
    fi

    prepare "$l"
    # echo "from:$from"
    # echo "alpha:$alpha"
    # echo "colors:$colors"
    # echo "stats:$stats"

    check_few_colors

    # the png has few colors
    if [[ -n "$few" ]]; then
      quantize "$from" 3 few
      crush "$temp/quantize.png"
      mv "$temp/quantize.png" "$temp/3.png"
      quantize "$from" 2 few
      crush "$temp/quantize.png"
      mv "$temp/quantize.png" "$temp/2.png"
      quantize "$from" 1 few
      crush "$temp/quantize.png"
      mv "$temp/quantize.png" "$temp/1.png"
    else
      mv "$temp/quantize.png" "$temp/3.png"
      quantize "$from" 2
      crush "$temp/quantize.png"
      mv "$temp/quantize.png" "$temp/2.png"
      quantize "$from" 1
      crush "$temp/quantize.png"
      mv "$temp/quantize.png" "$temp/1.png"
    fi

    ref=`gstat -c%s "$l"`
    size3=`gstat -c%s "$temp/3.png"`
    size2=`gstat -c%s "$temp/2.png"`
    size1=`gstat -c%s "$temp/1.png"`

    if [[ $ref -le $size2 ]]; then
      indice=`map $ref $size1 $size2 1 2 1`
    else
      indice=`map $ref $size2 $size3 2 3 1`
    fi

    # if map returns an integer, adds a trailing .0
    [[ -z `echo $indice | grep '\.'` ]] && indice="$indice.0"

    # displays the indice. Without raw mode, it is colored
    [[ -z "$raw" ]] && echo -n "`color_indice $indice` " || echo -n "$indice "

    # displays the percentage for the quality 1
    [[ $indice == '1.0' ]] && perc='0.0' || perc=`percent $ref $size1`
    [[ -z "$raw" ]] && perc=`color_percent $perc`
    echo -n "$perc "

    # displays the percentage for the quality 2
    [[ $indice == '2.0' ]] && perc='0.0' || perc=`percent $ref $size2`
    [[ -z "$raw" ]] && perc=`color_percent $perc`
    echo -n "$perc "

    # displays the percentage for the quality 3
    [[ $indice == '3.0' ]] && perc='0.0' || perc=`percent $ref $size3`
    [[ -z "$raw" ]] && perc=`color_percent $perc`
    echo -n "$perc "

    echo "$stats $l"

    rm -rf $temp
  done

  checklog_and_exit
fi

# creates png
echo "$files" | while read l; do

  # creates the png in a $temp directory
  temp=`mktemp -d /tmp/png.XXXXX`

  format=`identify -format %m "$l[0]" 2>/dev/null`
  if [[ -z "$format" ]]; then
    echo "png: '$l' is not valid" >&2
    # report an error in the log and skip this loop
    echo -n 1 > $log
    rm -rf $temp
    continue
  fi

  prepare "$l"
  # echo "from:$from"
  # echo "alpha:$alpha"
  # echo "colors:$colors"
  # echo "stats:$stats"
  
  if [[ -z "$quality" ]]; then
    # crush overwrite the targeted file, be sure it's not the original 
    if [[ "$from" = "$l" ]]; then
      cp "$l" "$temp/from.png"
      from="$temp/from.png"
    fi
    crush "$from"
    copy_dest "$l" "$from"

  else
    check_few_colors

    # the png has few colors
    if [[ -n "$few" ]]; then
      quantize "$from" $quality few
      [[ -n "$interlaced" ]] && interlace "$temp/quantize.png"
      crush "$temp/quantize.png"
      copy_dest "$l" "$temp/quantize.png"
    else
      [[ "$quality" -ne 3 ]] && quantize "$from" $quality
      [[ -n "$interlaced" ]] && interlace "$temp/quantize.png"
      crush "$temp/quantize.png"
      copy_dest "$l" "$temp/quantize.png"
    fi
  fi

  rm -rf $temp
done

checklog_and_exit
