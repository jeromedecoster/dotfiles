#!/bin/bash

# DESCRIPTION
# ===========
# compress and/or optimize jpeg
# jpeg optimizers usually only removes extra datas: color profiles, exif datas, comments
# they also optimize Huffman table and turn on/off progressive mode
# this command can do this, but this is not his main goal, which is to dramatically reduce the jpeg filesize
#
# this command exports a new compressed jpeg, corresponding to a predefined usage profile
# you choose between 4 profiles with the following arguments:
# -4 : target a desktop high quality image
# -3 : target a desktop regular quality image
# -2 : target a mobile regular quality image
# -1 : target a mobile low quality image
#
# this profiles usually do some miracles and you can win 25% to 50% with the jpeg you receive,
# thinked ready to go in production
#
# the option -a does not exports a jpeg but analyses the reference jpeg and returns some datas:
# the first number is an indice. It correspond to the jpeg quality
#
# example 1: if you obtain the indice 1.0, it means the filesize of the reference jpeg correspond to
# the same filesize of a jpeg created with the option -1, the mobile low quality.
# so, if the file was supposed to be used on a desktop site, this indice alerts you that the quality is too poor
#
# example 2: if you obtain the indice 7.0, it means the filesize of the reference jpeg is really above
# the filesize of a jpeg created with the option -4, the desktop high quality, which have the indice 4.0.
# so, if the file was supposed to be used on a regular desktop site, this indice alerts you that the filesize
# is really too high
#
# the 4 following returned datas are the percentage gain for quality -1 to -4
#
# the following returned data indicates if the reference jpeg is progressive or not, with a flag 'g' or '-'
#
# the last data indicates if the reference jpeg contains extra profile datas or not, with a flag 'f' or '-'
#
# several other options are available, look the usage message

# DEPENDENCIES
# ============
# cjpeg    - is installed with the jpeg-turbo homebrew formula
# djpeg    - is installed with the jpeg-turbo homebrew formula
# jpegtran - is installed with the jpeg-turbo homebrew formula


# write the usage message in the stderr and exit 1
usage() {
  { echo 'usage: jpeg [options] [file]'
    echo '       jpeg [options] [directory]'
    echo 'option: -a analysis'
    echo '        -n not progressive'
    echo '        -o output directory'
    echo '        -q quiet'
    echo '        -r recursive'
    echo '        -4 desktop high'
    echo '        -3 desktop'
    echo '        -2 mobile'
    echo '        -1 mobile low'
    exit 1
  } >&2
}

analysis=
path=
output=
progressive=1
quality=
quiet=
raw=
recursive=
statistic=

for e in "${@}"; do
  # add patterns to $ignore
  if [[ $out -eq 1 ]]; then
    # if everything is ok, set $output, removing trailing slash
    # otherwise, exit with usage if $output already setted in a previous loop or not a directory
    [[ -d "$e" && -z "$output" ]] && output=`echo "$e" | sed 's/\/*$//'` || usage
    out=
    continue
  fi

  # it's a valid file or directory
  if [[ -e "$e" ]]; then
    # exit with usage if $path already setted in a previous loop
    [[ -z "$path" ]] && path="$e" || usage
  # it's a valid argument
  elif [[ "$e" =~ ^-[anoqrw1234]$ ]]; then
    case "$e" in
      '-a') analysis=1     ;;
      '-n') progressive=   ;;
      # next loop, add $output directory
      '-o') out=1          ;;
      '-q') quiet=1        ;;
      '-r') recursive=1    ;;
      '-w') raw=1          ;;
         *) quality=${e:1} ;;
    esac
  # otherwise, exit with usage
  else
    usage
  fi
done

# if no path is given, works with pwd
# otherwise remove trailing slash
[[ -z "$path" ]] && path=. || path=`echo "$path" | sed 's/\/*$//'`

# creates a jpeg with cjpeg
# $1 : the path to the reference file
# $2 : the desired quality (integer from 1 to 4)
# $3 : creates a progressive jpeg if $3 == 1, otherwise a baseline jpeg
# the jpeg will be created in the $temp directory, defined outside this function
# the name of the file will be $2.jpg
create() {
  local q='-quality '
  case $2 in
    1) q="$q"50 ;;
    2) q="$q"60 ;;
    3) q="$q"70 ;;
    4) q="$q"80 ;;
  esac
  local p=
  [[ $3 -eq 1 ]] && p='-progressive'
  # the jpeg stream must come from djpeg
  eval "djpeg \"$1\" | cjpeg $q -optimize $p -outfile $temp/$2.jpg"
}

# optimizes the jpeg
# $1 : the path to the reference file
# the jpeg will be created in the $temp directory, defined outside this function
optimize() {
  local p=
  [[ $progressive -eq 1 ]] && p='-progressive'
  eval "jpegtran -copy none -optimize $p -outfile $temp/optimize.jpg \"$1\""
}

# remap a value from a range to another range
# $1 : the value to convert
# $2 : the min value of reference range
# $3 : the max value of reference range
# $4 : the min value of destination range
# $5 : the max value of destination range
map() {
  # awk is used to compute float easily
  local data=`awk "BEGIN { a = ($4 + ($5 - $4) * (($1 - $2) / ($3 - $2)))
                a = sprintf (\"%.1f\", a)
                sub(/,/, \".\", a)
                print a }"`

  echo -n "$data"
}

# without raw mode, color_indice is used to adds color
color_indice() {
  # warning: whitout 'echo | awk' you must use BEGIN instead END otherwise it fails
  # silently in 'echo "$files" | while read l; do' below
  local sign=`awk "BEGIN { if ($1 > 4) { print \"+\" } else if ($1 < 1) { print \"-\" } }"`
  if [[ "$sign" == '-' ]]; then
    echo -e "$STDOUT_WARNING$1$COL_RES"
  elif [[ "$sign" == '+' ]]; then
    echo -e "$STDOUT_NOTOK$1$COL_RES"
  else
    echo -e "$STDOUT_OK$1$COL_RES"
  fi
}

# the percentage of evolution from $1 to $2
# $1 : the reference value
# $2 : the new value
percent() {
  # awk is used to compute float easily
  local data=`awk "BEGIN { a = ($2 - $1) / $1 * 100
               a = sprintf (\"%.1f\", a)
               sub(/,/, \".\", a)
               if (a == \"-0.0\") { a = \"0.0\" }
               print a }"`

  echo "$data"
}

# without raw mode, color_percent is used to adds signs, % char and color
color_percent() {
  if [[ ${1:0:1} == '-' ]]; then
    echo -e "$STDOUT_OK$1%$COL_RES"
  elif [[ $1 == '0.0' ]]; then
    echo -e "$STDOUT_HIGHLIGHT$1%$COL_RES"
  else
    echo -e "$STDOUT_NOTOK+$1%$COL_RES"
  fi
}

# exit 0 or 1 if log contains a reported error
checklog_and_exit() {
  local error=
  [[ `cat $log` -eq 1 ]] && error=1
  rm -rf $log

  [[ -n "$error" ]] && exit 1 || exit 0
}

# collect $files. If $path is a file, treat only this file
if [[ -f "$path" ]]; then
  files="$path"
# otherwise, collect all jpg in the $path directory
else
  depth='-maxdepth 0'
  [[ -n "$recursive" ]] && depth=
  files=`eval "find $path/* -type f $depth -name '*.jpg' 2>/dev/null"`
fi

# no files to treat
[[ -z "$files" ]] && exit 0

# create temp log file to report error
log=`mktemp /tmp/log.XXXXX`

# analysis mode, no jpeg will be created
if [[ "$analysis" -eq 1 ]]; then

  echo "$files" | while read l; do

    # collect rdjpgcom datas
    result=`rdjpgcom -verbose "$l" 2>&1`
    # it is not a real JPEG
    if [[ -n `echo "$result" | grep "Not a JPEG file"` ]]; then
      echo "jpeg: '$l' is not valid" >&2
      # report an error in the log and skip this loop
      echo -n 1 > $log
      continue
    fi

    temp=`mktemp -d /tmp/jpeg.XXXXX`
    create "$l" 1 $progressive
    create "$l" 2 $progressive
    create "$l" 3 $progressive
    create "$l" 4 $progressive

    ref=`gstat -c%s "$l"`
    size1=`gstat -c%s "$temp/1.jpg"`
    size2=`gstat -c%s "$temp/2.jpg"`
    size3=`gstat -c%s "$temp/3.jpg"`
    size4=`gstat -c%s "$temp/4.jpg"`

    # compute and display the filesize indice
    # if you create an image with option -1, means 50% jpeg quality, the filesize of the generated correspond
    # to the index 1.0
    # with option -2, means 60% jpeg quality, the index is 2.0
    # with option -3, means 70% jpeg quality, the index is 3.0
    # with option -4, means 80% jpeg quality, the index is 4.0
    # check the filesize of the reference file $l and remap it into this indices range
    # ie: if the computed indice is 4.5, it means reference file is slightly greater than if you create the jpeg
    # with the option -4
    # the indice 4.0 correspond to a great quality for desktop
    # so, if the reference file is supposed to be used on mobile, this indice shows you that the current size is
    # really too big
    # also, if the computed indice is -3.5, it means reference file is really lower than if you create the jpeg
    # with the option -1
    # so it's not a good idea to create a new jpeg, the filesize would be increased
    if [[ $ref -le $size2 ]]; then
      # echo -n `map $ref $size1 $size2 1 2`" "
      indice=`map $ref $size1 $size2 1 2`
    elif [[ $ref -le $size3 ]]; then
      # echo -n `map $ref $size2 $size3 2 3`" "
      indice=`map $ref $size2 $size3 2 3`
    else
      # echo -n `map $ref $size3 $size4 3 4`" "
      indice=`map $ref $size3 $size4 3 4`
    fi

    # displays the indice. Without raw mode, it is colored
    [[ -z "$raw" ]] && echo -n "`color_indice $indice` " || echo -n "$indice "

    # compute and display the filesize diff for every exported quality, options -1 to -4
    # to simplify the readability, the percentage will be slightly faked if the indice match
    # a perfect 1.0 or 2.0 .. or 4.0
    # before that, we could have indice 1.0 and -0.1%, it's more accurate, but not really readable or useful
    # the goal of this command is not to win 10 bytes, but 10 or 100 ko

    # displays the percentage for the quality 1
    [[ $indice == '1.0' ]] && perc='0.0' || perc=`percent $ref $size1`
    [[ -z "$raw" ]] && perc=`color_percent $perc`
    echo -n "$perc "

    # displays the percentage for the quality 2
    [[ $indice == '2.0' ]] && perc='0.0' || perc=`percent $ref $size2`
    [[ -z "$raw" ]] && perc=`color_percent $perc`
    echo -n "$perc "

    # displays the percentage for the quality 3
    [[ $indice == '3.0' ]] && perc='0.0' || perc=`percent $ref $size3`
    [[ -z "$raw" ]] && perc=`color_percent $perc`
    echo -n "$perc "

    # displays the percentage for the quality 4
    [[ $indice == '4.0' ]] && perc='0.0' || perc=`percent $ref $size4`
    [[ -z "$raw" ]] && perc=`color_percent $perc`
    echo -n "$perc"

    # if the reference file is a progressive jpeg, displays a flag 'g', otherwise displays '-'
    [[ -n `echo "$result" | tail -n 1 | grep "Progressive"` ]] && echo -n ' g'  || echo -n ' -'

    # if the reference file contains profile or comments datas, displays a flag 'f', otherwise displays '-'
    [[ `echo "$result" | wc -l` -gt 2 ]] && echo -n ' f ' || echo -n ' - '

    # the filename
    echo "$l"

    rm -rf $temp
  done

  checklog_and_exit
fi

# creates jpeg
echo "$files" | while read l; do

  # collect rdjpgcom datas
  result=`rdjpgcom -verbose "$l" 2>&1`
  # it is not a real JPEG
  if [[ -n `echo "$result" | grep "Not a JPEG file"` ]]; then
    echo "jpeg: '$l' is not valid" >&2
    # report an error in the log and skip this loop
    echo -n 1 > $log
    continue
  fi

  # creates the jpeg in a $temp directory
  temp=`mktemp -d /tmp/jpeg.XXXXX`
  # $quality is setted, create new jpeg
  if [[ -n "$quality" ]]; then
    create "$l" $quality $progressive
    src="$temp/$quality.jpg"
  # otherwise, just optimize it with jpegtran
  else
    optimize "$l"
    src="$temp/optimize.jpg"
  fi

  base="`basename "$l"`"

  # without $output directory, the file is generated with a timestamp
  # from path/to/file.jpg to path/to/file-165600437.jpg
  if [[ -z "$output" ]]; then

    dir=`dirname "$l"`
    filename="${base%.*}"

    timestamp=`gdate +%H%M%S%N | cut -c 1-9`
    dest="$dir/$filename-$timestamp.jpg"

  # otherwise from path/to/file.jpg to destination/file.jpg
  else
    dest="$output/$base"
  fi

  # existing $dest file is overwritten
  cp "$src" "$dest"

  # not in quiet mode, displays informations about compression
  if [[ -z "$quiet" ]]; then
    # computes the compression gain
    perc=`percent $(gstat -c%s "$l") $(gstat -c%s "$dest")`

    # without raw mode, the percentage is colored
    [[ -z "$raw" ]] && perc=`color_percent $perc`

    echo "$perc $dest"
  fi

  rm -rf $temp
done

checklog_and_exit
