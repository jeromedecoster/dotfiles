#!/bin/bash

# DESCRIPTION
# ===========
# advanced tree listing
# exclude annoying files from the tree, .DS_Store Thumbs.db .git .svn ...
#
# directories have a trailing '/'
# empty directories are dark yellow, otherwise are blue
#
# empty files (0 ko) are dark yellow
#
# binary executable files are red
# text executable files are green
#
# symbolic link files are pink, followed by the target path
# if the link is dead, the target path is dark yellow

# DEPENDENCIES
# ============
# grealpath - is installed with the coreutils homebrew formula
# gstat     - is installed with the coreutils homebrew formula
# tree      - is installed with the tree homebrew formula


# write the usage message in the stderr and exit 1
usage() {
  { echo usage: lt [options] [directory]
    echo 'option: -[1-9]       max display depth of the directory tree'
    echo "        -I pattern   ignore files that match the wild-card pattern"
    exit 1
  } >&2
}

for e in "${@}"; do
  # add patterns to $ignore
  if [[ $pattern -eq 1 ]]; then
    ignore="$e|$ignore"
    pattern=
    continue
  fi

  # it's a valid directory
  if [[ -d "$e" ]]; then
    # if not already defined, set $path
    # otherwise exit with usage if setted in a previous loop
    [[ -z "$path" ]] && path="$e" || usage
  # it's like a level argument
  elif [[ "$e" =~ ^-[1-9] ]]; then
    # if it's a valid level argument, set $level
    # otherwise exit with usage
    [[ -z `echo "${e:1}" | sed 's/[0-9]//g'` ]] && level="-L ${e:1}" || usage
  # define pattern(s) to ignore
  elif [[ "$e" == '-I' ]]; then
    # next loop, add ignore pattern
    pattern=1
  else
    usage
  fi
done

# if no path is given, works with pwd
# otherwise remove trailing slash
[[ -z "$path" ]] && path=. || path=`echo "$path" | sed 's/\/*$//'`

# concat the following patterns to $ignore
while read l; do
  ignore="$l|$ignore"
done < <(cat <<EOF
.DocumentRevisions-V100
.DS_Store
.fseventsd
.git
node_modules
.Spotlight-V100
.svn
.TemporaryItems
.Trash
.Trashes
desktop.ini
Thumbs.db
EOF)

# remove the last pipe
ignore=`echo "$ignore" | sed 's/|$//'`

cwd=`pwd`
root=

tree $level --dirsfirst --noreport -apfN -I $ignore "$path" | while read l; do
  # first loop, echo the raw line
  [[ -z "$root" ]] && echo "$l" && root=1 && continue

  # the tree graph
  graph=`echo "$l" | sed 's/\[.*//'`
  # exclude the graph and the first [
  tmp=`echo "$l" | sed 's/^.*\[//'`
  # first char, to search for type 'd' or 'l'
  first=`echo "$tmp" | cut -c 1`
  # fourth char, to search for user executable 'x'
  fourth=`echo "$tmp" | cut -c 4`
  # path/to/file
  path=`echo "$tmp" | sed 's/^.*\][ \t]*//'`
  # filename of $path
  base=`basename "$path"`

  # the file is a directory
  if [[ $first == 'd' ]]; then
    # empty directory
    if [[ -z `ls -A1 "$path" | egrep -v -e "^\.DS_Store$" \
                                        -e "^desktop\.ini$" \
                                        -e "^Thumbs\.db$" \
                                        -e "^\.Spotlight-V100$" \
                                        -e "^\.TemporaryItems$" \
                                        -e "^\.fseventsd$"` ]]; then
      file="$STDOUT_EMPTY_OR_MISSING$base/$COL_RES"
    else
      file="$STDOUT_DIRECTORY$base/$COL_RES"
    fi

  # the file is an executable
  elif [[ $fourth == 'x' ]]; then

    # it's a symbolic link
    if [[ $first == 'l' ]]; then
      # symbolic link has special display
      # the name is colored in pink
      # then followed by ' -> ' then the targeted path

      # capture the link, the string after ->
      link=`echo "$path" | sed 's/.* -> //'`
      # the path must me captured again, the string before ->
      path=`echo "$path" | sed 's/ -> .*//'`

      # symbolic link then ->
      file="$STDOUT_LINK`basename "$path"`$COL_RES -> "
      cd "`dirname "$path"`"
      # the resolved path of $link is valid
      if [[ -n `grealpath -e "$link" 2>/dev/null` ]]; then
        file+="$link"
      # the resolved path is dead
      else
        file+="$STDOUT_EMPTY_OR_MISSING$link$COL_RES"
      fi
      cd "$cwd"

    # it's an executable but not a symbolic link
    else
      # it is a binary file
      if [[ -n `file -b --mime "$path" | grep 'charset=binary'` ]]; then
        file="$STDOUT_BINARY_EXECUTABLE$base$COL_RES"
      # it must be a text file executable
      else
        file="$STDOUT_TEXT_EXECUTABLE$base$COL_RES"
      fi
    fi

  # it's not a directory or an executable file
  else
    # file without size (0 ko) have a special color
    if [[ `gstat -c%s "$path"` -eq 0 ]]; then
      file="$STDOUT_EMPTY_OR_MISSING$base$COL_RES"
    else
      # non-executable files, but known as windows executable
      if [[ -n `echo "$base" | egrep '\.(cmd|bat)$'` ]]; then
        file="$STDOUT_TEXT_EXECUTABLE$base$COL_RES"
      # otherwise standard output
      else
        file="$base"
      fi
    fi
  fi

  # echo the result
  echo -e "$graph$file"
done
