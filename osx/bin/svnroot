#!/bin/bash

# DESCRIPTION
# ===========
# return the local repository root of a svn repository


# write the usage message in the stderr and exit 1
usage() {
  { echo usage: svnroot
    echo '       svnroot [directory]'
    echo '       svnroot [file]'
    exit 1
  } >&2
}

cwd=`pwd`

path=
# if no path is given, works with pwd
if [[ $# -eq 0 ]]; then
  path=.
elif [[ $# -eq 1 ]]; then
  # the path is a directory, remove trailing slash
  if [[ -d "$1" ]]; then
    path=`echo "$1" | sed 's/\/*$//'`
  # the path is a file, get parent directory
  elif [[ -f "$1" ]]; then
    path=`dirname "$1"`
  fi
fi
[[ -z "$path" ]] && usage

cd "$path"
root=`pwd`

info=`svn info 2>/dev/null`
[[ -z "$info" ]] && echo "svn: '$path' is not a working copy" >&2 && exit 1

get_url() {
  echo "$info" | grep "^URL" | cut -c 6-999
}
get_uuid() {
  echo "$info" | grep "^Repository UUID" | cut -c 18-999
}
# check if the current $info is still valid, means:
# $info is not empty
# $info url is a part of the original $url
# $info uuid is equal to the original $uuid
check() {
  [[ -n "$info" && -n `echo "$url" | grep "^$(get_url)"` && `get_uuid` == "$uuid" ]] && echo 1
}

url=`get_url`
uuid=`get_uuid`

while true; do
  cd ..
  info=`svn info 2>/dev/null`
  # check is empty, means $info is not valid
  [[ -z `check` ]] && break
  root=`pwd`
done

echo "$root"
cd "$cwd"
