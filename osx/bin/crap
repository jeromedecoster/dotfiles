#!/bin/bash

# DESCRIPTION
# ===========
# remove all crap files in a directory and his sub-directories
#
# crap files are:
# .DS_Store
# desktop.ini
# .fseventsd
# Thumbs.db
# .Spotlight-V100
# .TemporaryItems
#
# crap files also includes:
# empty directories
# dead links
# zero ko files
#
# with option [-acdlz], the command only list the removable files
#
# without option, the command enter an interactive mode,
# prompt the user to select the kind of files to remove
#
# if the directory is inside a git or svn repository,
# all already tracked crap files will be ignored


# DEPENDENCIES
# ============
# greadlink - is installed with the coreutils homebrew formula
# grealpath - is installed with the coreutils homebrew formula
# svnroot   - is ~/.dotfiles/osx/bin/svnroot


# write the usage message in the stderr and exit 1
usage() {
  { echo usage: crap [options] [directory]
    echo option: -a list all
    echo '        -c list crap files'
    echo '        -d list empty directories'
    echo '        -l list dead links'
    echo '        -z list 0 ko files'
    exit 1
  } >&2
}

crap=
empty=
dead=
zero=
path=

for e in "${@}"; do
  # it's a valid argument
  if [[ "$e" =~ ^-[acdlz]$ ]]; then
    case "$e" in
      '-a') crap=1; empty=1; dead=1; zero=1 ;;
      '-c') crap=1  ;;
      '-d') empty=1 ;;
      '-l') dead=1  ;;
      '-z') zero=1  ;;
    esac
  # it's a valid directory
  elif [[ -d "$e" ]]; then
    # exit with usage if $path already setted in a previous loop
    [[ -z "$path" ]] && path="$e" || usage
  # otherwise, exit with usage
  else
    usage
  fi
done

# if no path is given, works with pwd
# otherwise remove trailing slash
[[ -z "$path" ]] && path=. || path=`echo "$path" | sed 's/\/*$//'`

# no option passed, enter interactive mode
if [[ -z "$crap" && -z "$empty" && -z "$dead" && -z "$zero" ]]; then
  declare -i nbr=0

  crap=`crap -c "$path"`
  [[ -n "$crap" ]] && nbr=nbr+1 && echo "$crap" \
                    | while read c; do
                        echo -e "${STDOUT_HIGHLIGHT}crap file${COL_RES} $c"
                      done

  empty=`crap -d "$path"`
  [[ -n "$empty" ]]  && nbr=nbr+1 && echo "$empty" \
                      | while read f; do
                          echo -e "${STDOUT_HIGHLIGHT}empty dir${COL_RES} $f"
                        done

  dead=`crap -l "$path"`
  [[ -n "$dead" ]] && nbr=nbr+1 && echo "$dead" \
                    | while read f; do
                        echo -e "${STDOUT_HIGHLIGHT}dead link${COL_RES} $f"
                      done

  zero=`crap -z "$path"`
  [[ -n "$zero" ]] && nbr=nbr+1 && echo "$zero" \
                    | while read f; do
                        echo -e "${STDOUT_HIGHLIGHT}0 ko file${COL_RES} $f"
                      done

  [[ $nbr -eq 0 ]] && exit

  echo
  chars=
  [[ $nbr -gt 1 ]]  && echo "  a) all" && chars=A
  [[ -n "$crap" ]]  && echo "  c) crap files" && chars+=c
  [[ -n "$empty" ]] && echo "  d) empty directories" && chars+=d
  [[ -n "$dead" ]]  && echo "  l) dead links" && chars+=l
  [[ -n "$zero" ]]  && echo "  z) 0 ko files" && chars+=z
  echo

  # uppercase the only char
  [[ $nbr -eq 1 ]] && chars=`echo $chars | tr '[a-z]' '[A-Z]'`

  while true; do
    echo -e -n "what do you want remove? [$chars]: "
    read r
    r=$(echo "$r" | tr '[A-Z]' '[a-z]')
    case "$r" in
      a|c|d|z) [[ -n `echo "$chars" | tr '[A-Z]' '[a-z]' | grep "$r"` ]] && break ;;
           '') r=`echo "$chars" | cut -c 1 | tr '[A-Z]' '[a-z]'` && break ;;
    esac
  done

  [[ $r == 'a' || $r == 'c' ]] && echo "$crap"  | while read f; do rm -fr "$f"; done
  [[ $r == 'a' || $r == 'd' ]] && echo "$empty" | while read f; do rm -fr "$f"; done
  [[ $r == 'a' || $r == 'l' ]] && echo "$dead"  | while read f; do rm -f  "$f"; done
  [[ $r == 'a' || $r == 'z' ]] && echo "$zero"  | while read f; do rm -f  "$f"; done

  # interactive mode stops here
  # explicitly exit with 0 to prevent exitcode 1 in some strange cases
  exit 0
fi

# check if $path is inside a git or svn repository
# if yes, list all currently tracked files
# if a crap file, 0 ko file or an empty directory is tracked, it will not be proposed to the suppression
cwd=`pwd`
cd "$path"
# if inside a git repository
if [[ -n `git status 2>/dev/null` ]]; then
  # the variable $tracked is a listing of all files currently tracked by the git repository
  # all files are listed with an absolute path (on the hard drive)
  tracked=`root=$(git rev-parse --show-toplevel) && cd "$root" && git ls-files | while read l; do \
      echo "$root/$l"
    done`
# if inside a svn checkout repository
elif [[ -n `svn info 2>/dev/null` ]]; then
  root=`svnroot 2>/dev/null`
  # the command 'svn ls' needs the repository server url
  url=`svn info | grep "^URL" | cut -c 6-999`
  # the variable $tracked is a listing of all files currently tracked by the svn server
  # and the locally tracked files (not yet commited)
  # all files are listed with an absolute path (on the hard drive)
  tracked=`svn ls -R "$url" | sed 's/\/*$//' | while read l; do
      echo "$root/$l"
    done && svn status | grep -v "^\?" | cut -c 9-999 | while read l; do
      echo "$root/$l"
    done`
fi
cd "$cwd"

# crap files detection
if [[ $crap -eq 1 ]]; then
  crap=`find "$path" -name .DS_Store \
                      -o -name desktop.ini \
                      -o -name .fseventsd \
                      -o -name Thumbs.db \
                      -o -name .Spotlight-V100 \
                      -o -name .TemporaryItems 2>/dev/null \
    | sed "s/^\.\///"`

  if [[ -n "$crap" ]]; then
    # under git or svn repository, tracked files will not be listed
    if [[ -n "$tracked" ]]; then
      echo "$crap" | while read l; do
        # use grealpath from coreutils formula
        [[ -z `echo "$tracked" | egrep "^$(grealpath "$l")$"` ]] && echo "$l"
      done
    else
      echo "$crap"
    fi
  fi
fi

# empty directories detection
if [[ $empty -eq 1 ]]; then
  # echo "collect empty:$path:"
  # locate empty directories with 'find -E "$path" -empty -type d' does not work
  # ie: if a directory contains only a '.DS_Store' file, it will be judged as filled

  # test if $1 is an empty directory
  # if yes, echo the path $1
  # if no, echo nothing
  # if $1 is an empty directory, but his parent is also empty (except containing this child),
  # then echo the parent path instead
  empty() {
    local path="$1"
    local base=
    local tmp=
    while true; do
      if [[ -z `ls -A1 "$path" | egrep -v -e "^\.DS_Store$" \
                                          -e "^desktop\.ini$" \
                                          -e "^Thumbs\.db$" \
                                          -e "^\.Spotlight-V100$" \
                                          -e "^\.TemporaryItems$" \
                                          -e "^\.fseventsd$" \
                                          -e "^$base$" ` ]]; then
        tmp=`basename "$path"`
        [[ "$tmp" != '.' && "$tmp" != '/' ]] && base="$tmp" || break
        path=`dirname "$path"`
      else
        break
      fi
    done
    [[ -n "$base" ]] && echo "$path/$base" | sed "s/^\.\///"
  }

  # nerd command ;)
  empty=`find -E "$path" -type d ! -regex ".*/\.(git|svn)($|/.*)" \
                                 ! -regex ".*/node_modules($|/.*)" 2>/dev/null \
    | sed "s/^\.\///" \
    | grep -v "^$path$" \
    | while read dir; do
        dir=$(empty "$dir")
        [[ -n "$dir" ]] && echo "$dir"
      done`

  if [[ -n "$empty" ]]; then
    # under git or svn repository, tracked files will not be listed
    if [[ -n "$tracked" ]]; then
      echo "$empty" | while read l; do
        # use grealpath from coreutils formula
        [[ -z `echo "$tracked" | egrep "^$(grealpath "$l")$"` ]] && echo "$l"
      done
    else
      echo "$empty"
    fi
  fi
fi

# dead links detection
if [[ $dead -eq 1 ]]; then
  dead=`find -E "$path" -type l ! -regex ".*/\.(git|svn)($|/.*)" \
                                ! -regex ".*/node_modules($|/.*)" 2>/dev/null \
    | sed "s/^\.\///" | while read l; do
      [[ -z $(greadlink -e "$l") ]] && echo "$l"
    done`

  if [[ -n "$dead" ]]; then
    # under git or svn repository, tracked files will not be listed
    if [[ -n "$tracked" ]]; then
      echo "$dead" | while read l; do
        # use grealpath from coreutils formula
        [[ -z `echo "$tracked" | egrep "^$(grealpath "$l")$"` ]] && echo "$l"
      done
    else
      echo "$dead"
    fi
  fi
fi

# 0 ko files detection
if [[ $zero -eq 1 ]]; then
  zero=`find -E "$path" -empty -type f ! -regex ".*/\.(git|svn)($|/.*)" \
                                       ! -regex ".*/node_modules($|/.*)" 2>/dev/null \
    | sed "s/^\.\///"`

  if [[ -n "$zero" ]]; then
    # under git or svn repository, tracked files will not be listed
    if [[ -n "$tracked" ]]; then
      echo "$zero" | while read l; do
        # use grealpath from coreutils formula
        [[ -n "$l" && -z `echo "$tracked" | egrep "^$(grealpath "$l")$"` ]] && echo "$l"
      done
    else
      echo "$zero"
    fi
  fi
fi
