#!/bin/bash

# if not inside a git repository
if [[ -z `git status 2>/dev/null` ]]; then
  # write the error message in the stderr
  echo "fatal: Not a git repository (or any of the parent directories): .git" >&2
  # exit with exitcode 128 which is the same error code
  # returned by 'git pull' inside a non-git repo directory
  exit 128
fi

# creates the gitignore file with some predefined filters
create() {
  cat > "$file" <<EOF
.DS_Store
desktop.ini
Thumbs.db
.DocumentRevisions-V100/
.fseventsd/
.Spotlight-V100/
.svn/
.TemporaryItems/
.Trash/
.Trashes/
node_modules/
EOF
}

# check if the gitignore file is not currently tracked by the git repository
# if yes, prompt to add it
add() {
  # if not tracked, git returns an exitcode 1
  git ls-files "$file" --error-unmatch &>/dev/null
  # if not tracked or already tracked but modified
  if [[ $? -ne 0 || -n `git diff --name-status "$file"` ]]; then
    while true; do
      echo -n -e "add ${STDOUT_HIGHLIGHT}.gitignore${COL_RES} to git? [Yn]: "
      read r
      r=$(echo "$r" | tr '[A-Z]' '[a-z]')
      case "$r" in
        y|n) break ;;
         '') r='y' && break ;;
      esac
    done

    # if the reply is 'n', exit 0
    # it prevents a disturbing exitcode 1 in the prompt infos
    [[ "$r" == 'y' ]] && git add "$file" || exit 0
  fi
}

# .gitignore file will be added/listed at the repository root
file=`git rev-parse --show-toplevel`/.gitignore
# without argument
if [[ $# -eq 0 ]]; then
  # the gitignore file does not exist, prompt to create it
  if [[ ! -f "$file" ]]; then
    while true; do
      echo -n -e "create ${STDOUT_HIGHLIGHT}.gitignore${COL_RES} file? [Yn]: "
      read r
      r=$(echo "$r" | tr '[A-Z]' '[a-z]')
      case "$r" in
        y|n) break ;;
         '') r='y' && break ;;
      esac
    done
    # if the reply is 'y', creates the gitignore file
    # otherwise exit
    [[ $r == 'y' ]] && create || exit 0
  fi

# with argument(s)
else
  # creates the gitignore file if it does not exist
  [[ ! -f "$file" ]] && create

  # adds the pattern if it is not already defined
  for pat in "${@}"; do
    if [[ -z `grep "^${pat}$" "$file"` ]]; then
      echo "$pat" >> "$file"
    fi
  done
fi

# show the current gitignore content
cat "$file"

# if gitignore is not currently tracked, prompt to add it
add "$file"
