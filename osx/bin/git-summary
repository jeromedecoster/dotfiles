#!/bin/bash

# DESCRIPTION
# ===========
# displays summary informations from a git repository
#
# usage: git summary [commiters]
#
# by default only top 10 commiters are listed
# you can modify it by passing a new number as argument, ie: git summary 3

# DEPENDENCIES
# ============
# gtac - is installed with the coreutils homebrew formula
# gwc  - is installed with the coreutils homebrew formula


# if not inside a git repository
if [[ -z `git status 2>/dev/null` ]]; then
  # write the error message in the stderr
  echo "fatal: Not a git repository (or any of the parent directories): .git" >&2
  # exit with exitcode 128 which is the same error code
  # returned by 'git pull' inside a non-git repo directory
  exit 128
fi

# by default the maximum of displayed users is 10, means only the top 10 commiters
# you can modify this count by passing a new number as first argument, ie: git summary 5
[[ $1 =~ ^[[:digit:]]+$ && $1 -gt 0 ]] && max=$1 || max=10

# the local root directory of this git repository
root=`git rev-parse --show-toplevel`
# try to get the project name from the remote origin url
origin=`git remote -v | grep -E "^origin" | head -1 | cut -c 8-999 | sed 's/[[:blank:]].*//'`
# if the remote origin is defined, extract the project name
if [[ -n "$origin" ]]; then
  origin=`echo "$origin" | sed -e 's/.git$//' -e 's/^.*\///'`
# otherwise get the name of the $root directory
else
  origin=`echo "$root" | sed 's/^.*\///'`
fi

echo "project  : $origin"

# check if it's a new born repository (without any commit yet)
init=`git status | grep "^# Initial commit"`
if [[ -n "$init" ]]; then
  echo 'repo age : no commit'
  echo 'commits  : 0'
else
  echo "repo age : `git log --format='%cr' | tail -n 1 | sed 's/ ago//'`"
  # the count of commits in this repository
  commits=`git log --oneline --no-color | wc -l | tr -d ' '`
  echo "commits  : $commits"
fi

echo "files    : `git ls-files "$root" | wc -l | tr -d ' '`"

# extract commit count within $shortlog line
get_commit() {
  echo "$1" | sed -e 's/^[[:blank:]]*//' -e 's/[[:blank:]].*//'
}
# extract username within $shortlog line
get_username() {
  echo "$1" | sed -e 's/^[[:blank:]]*[[:digit:]]*[[:blank:]]*//'
}

# if new born repository
if [[ -n "$init" ]]; then
  echo 'authors  : 0'
else
  # the count of commits then the username
  shortlog=`git shortlog -n -s`

  # the count of commiters in this repository
  authors=`echo "$shortlog" | wc -l | tr -d ' '`
  echo "authors  : $authors"
  echo

  [[ $authors -le $max ]] && echo 'commits by author:' || echo "commits by author (the $max first):"

  # reduce the count of users with the $max count
  shortlog=`echo "$shortlog" | head -n $max`

  # the count of commits of the best commiter
  highest=`get_commit $(echo "$shortlog" | head -n 1)`
  # count of chars of the highest percentage
  size_percent=`printf "%2.1f" $(echo "$highest/$commits*100" | bc -l | tr '.' ',') | gwc -L`
  # count of chars of the longest username
  size_authors=`get_username "$(echo "$shortlog")" | gwc -L`

  # display the commits by authors table
  echo "$shortlog" | while read l; do
    count=`get_commit "$l"`
    percent=`echo "$count/$commits*100" | bc -l | tr '.' ','`
    printf "  %5s  %$size_percent.1f%%  %s\n" $count $percent "`get_username "$l"`"
  done
  echo

  if [[ $authors -eq 1 ]]; then
    echo 'last commits:'
  else
    [[ $authors -le $max ]] && echo 'last commits by author:' || echo "last commits by author (the $max first):"
  fi

  # the log by user: short hash then timestamp then log message
  biglog=`git shortlog --format="%h %at %s"`
  # just the short hash of each commit
  hashes=`git log --format='%h'`


  # display the last commits by author table
  declare -i idx=0
  echo "$shortlog" | while read l; do
    username=`get_username "$l"`
    # logs of $username
    userlog=$(echo "$biglog" | sed -n "/^$username (/,\$p" | sed -n '2,/^$/p' | sed '/^$/d')
    # coount of commits of $username
    commits=`echo "$userlog" | wc -l | tr -d ' '`
    # count of different days of commits of $username
    days=`echo "$userlog" | while read l; do
      # convert timestamp to human date
      timestamp=$(echo "$l" | cut -f2 -d" ")
      date -r "$timestamp" +%Y-%m-%d
    done | uniq | wc -l | tr -d ' '`

    echo -n "$username ($commits commit"
    [[ $commits -gt 1 ]] && echo -n "s"
    echo -n " in $days day"
    [[ $days -gt 1 ]] && echo -n "s"
    echo "):"

    # table of 10 latests commits of $username
    echo "$userlog" | tail -n 10 | gtac  | while read l; do
      index=`echo "$hashes" | grep -n "^$(echo "$l" | cut -c 1-7)" | cut -f1 -d:`
      printf "  %5s  %s\n" -$index "`echo "$l" | cut -c 20-999`"
    done

    idx+=1
    [[ $idx -ne $authors ]] && echo
  done
fi
