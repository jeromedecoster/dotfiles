#!/usr/bin/env ruby
# encoding: utf-8
require 'open3'

# NOTE: git-summary is done in Ruby
# I'll try to achieve it in awk, but OSX awk is not multibyte and some problems appears
# with multibyte author names/comments
# gawk is multibytes but not installed by default in OSX. It can be easily installed
# with homebrew but, in msysGit, the gawk version is too old and don't support multibyte
# So, to simplify everything, it's finnaly done in Ruby

# Open3.capture3 comes with Ruby 1.9.2
if RUBY_VERSION < '1.9.2'
    $stderr.puts 'error: Ruby 1.9.2 minimum required'
    exit 1
end

unless Open3.capture3('git status 2>/dev/null')[2].success?
    # write the error message in the stderr
    # and exit with exitcode 128 which is the same error code than
    # returned by 'git pull' inside a non-git repo directory
    $stderr.puts 'fatal: Not a git repository (or any of the parent directories): .git'
    exit 128
end

# root is the main directory of this git repo
root = `git rev-parse --show-toplevel`.strip

# try to get the project name from the remote origin url
origin = `git remote -v | grep -E "^origin" | head -1`.strip
# if the remote origin is defined, extract the project name...
if origin.size > 0
    puts "project  : " + origin[origin.rindex('/')+1..origin.rindex('.git')-1]
# ...otherwise get the name of the root directory
else
    puts "project  : " + root[root.rindex('/')+1..-1]
end

# check if it's a new born repo (without any commit yet)
init = `git status | grep -E "^# Initial commit" -c`.strip

# it init = 1, nothing was commited
if init == '1'
    puts 'repo age : no commit'
    puts 'commits  : 0'
else
    puts "repo age : " + `git log --format="%cr" | tail -n 1 | sed 's/ ago//'`.strip
    puts "commits  : " + `git log --oneline --no-color | wc -l | tr -d ' '`.strip
end

# count the tracked files from the root directory
puts "files    : " + `git ls-files "$root" | wc -l | tr -d ' '`.strip

if init == '1'
    puts 'authors  : 0'
else
    # authors count
    authors = `git shortlog -s | wc -l | tr -d ' '`.strip.to_i
    puts "authors  : #{authors}"

    # commits by author show in one line:
    # -> commit count
    # -> commit percentage
    # -> author name
    puts
    puts 'commits by author:'
    sum = 0
    dat = []
    `git shortlog -n -s`.split("\n").each do |e|
        m = e.match /^\s*(\d+)\s+(.*)$/
        if ! m.nil? and m.captures.size == 2
            pi   = m.captures[0].to_i
            sum += pi
            dat << [pi, m.captures[1].strip]
        end
    end
    siz1 = dat[0][0].to_s.size
    dat.map! do |e|
        [e[0], sprintf("%2.1f%%", 100 * e[0].to_f / sum), e[1]]
    end
    siz2 = dat[0][1].size
    dat.each do |e|
        printf "  %#{siz1}s  %#{siz2}s  %s\n", e[0], e[1], e[2]
    end

    # last commits by author show:
    # -> the 10 last commit by author (most recent first)
    # -> commit negative index (-1 means the previous commit)
    if authors == 1
        puts
        puts 'last commits:'
    else
        puts
        puts 'last commits by author:'
    end

    dat = []
    hashes = `git log --format='%h'`.strip.split "\n"
    log = `git shortlog -n --format="%h %s"`.strip.split "\n"
    log.each do |e|
        next if e.size == 0

        if e[0] != ' '
            dat << [e.strip, []]
        else
            dat.last[1] << e.strip
        end
    end
    siz = 0
    dat.each do |e|
        e[1] = e[1].last(10).reverse
        e[1].map! do |ee|
            idx = "-#{hashes.index(ee[0..6])+1}"
            if idx.size > siz
                siz = idx.size
            end
            msg = ee[8..-1]
            if msg.size > 100
                msg = msg[0..97]+"..."
            end
            ee  = [idx, msg]
        end
    end

    idx = dat.size - 1
    dat.each_with_index do |e, i|
        puts e[0]
        e[1].each do |ee|
            printf "  %#{siz}s  %s\n", ee[0], ee[1]
        end
        puts if i != idx
    end
end
